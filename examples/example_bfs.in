list<node> bfs(graph gh, node r) {
  if (gh == null or gh.size() == 0) { return null; }

  int i; node curr; node tmp_n; list<node> children;
  dict<node> set = { r: r };
  list<node> res = null;

  list<node> queue = [ r ];
  while (queue.size() > 0) {
    curr = queue.get(0); queue.remove(0);
    if (res == null) { res = [curr]; } else { res.add(curr); }

    children = gh@curr;
    for (i=0; i<children.size(); i=i+1) {
      tmp_n = children.get(i);
      if (not set.has( tmp_n )) {
        set.put( tmp_n, tmp_n );
        queue.add(tmp_n);
      }
    }
  }

  return res;
}

void printNodeList(list<node> l) {
  int i;
  printf("[ ");
  for (i=0; i<l.size()-1; i = i+1) {
    printf("%s, ", string( l.get(i) ));
  }
  if (l.size() > 0) {
    printf("%s ]\n", string( l.get(i) ));
  } else {
    print("]");
  }
}

node a = node("a");
node b = node("b");
node c = node("c");
node d = node("d");
node e = node("e");
node f = node("f");
node g = node("g");

graph gh;

print("a--[b, c--[e, f], d]");
gh = a--[b, c--[e, f], d];
printf("bfs(gh, a): ");
printNodeList( bfs(gh, a) );

printf("bfs(gh, b): ");
printNodeList( bfs(gh, b) );

printf("bfs(gh, c): ");
printNodeList( bfs(gh, c) );

printf("bfs(gh, d): ");
printNodeList( bfs(gh, d) );

printf("bfs(gh, e): ");
printNodeList( bfs(gh, e) );

printf("bfs(gh, f): ");
printNodeList( bfs(gh, f) );
