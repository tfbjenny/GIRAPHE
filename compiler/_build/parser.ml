type token =
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | MOD
  | SEMICOLUMN
  | SEQUENCE
  | ASSIGN
  | COLUMN
  | DOT
  | GREATER
  | GREATEREQUAL
  | SMALLER
  | SMALLEREQUAL
  | EQUAL
  | NOTEQUAL
  | AND
  | OR
  | NOT
  | IF
  | ELSE
  | FOR
  | WHILE
  | BREAK
  | CONTINUE
  | IN
  | RETURN
  | LINK
  | RIGHTLINK
  | LEFTLINK
  | SIMILARITY
  | AT
  | AMPERSAND
  | INT
  | FLOAT
  | STRING
  | BOOL
  | NODE
  | GRAPH
  | LIST
  | DICT
  | NULL
  | VOID
  | QUOTE
  | LEFTBRACKET
  | RIGHTBRACKET
  | LEFTCURLYBRACKET
  | RIGHTCURLYBRACKET
  | LEFTROUNDBRACKET
  | RIGHTROUNDBRACKET
  | EOF
  | ID of (string)
  | INT_LITERAL of (int)
  | STRING_LITERAL of (string)
  | FLOAT_LITERAL of (float)
  | BOOL_LITERAL of (bool)

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
 open Ast 
# 64 "parser.ml"
let yytransl_const = [|
  257 (* PLUS *);
  258 (* MINUS *);
  259 (* TIMES *);
  260 (* DIVIDE *);
  261 (* MOD *);
  262 (* SEMICOLUMN *);
  263 (* SEQUENCE *);
  264 (* ASSIGN *);
  265 (* COLUMN *);
  266 (* DOT *);
  267 (* GREATER *);
  268 (* GREATEREQUAL *);
  269 (* SMALLER *);
  270 (* SMALLEREQUAL *);
  271 (* EQUAL *);
  272 (* NOTEQUAL *);
  273 (* AND *);
  274 (* OR *);
  275 (* NOT *);
  276 (* IF *);
  277 (* ELSE *);
  278 (* FOR *);
  279 (* WHILE *);
  280 (* BREAK *);
  281 (* CONTINUE *);
  282 (* IN *);
  283 (* RETURN *);
  284 (* LINK *);
  285 (* RIGHTLINK *);
  286 (* LEFTLINK *);
  287 (* SIMILARITY *);
  288 (* AT *);
  289 (* AMPERSAND *);
  290 (* INT *);
  291 (* FLOAT *);
  292 (* STRING *);
  293 (* BOOL *);
  294 (* NODE *);
  295 (* GRAPH *);
  296 (* LIST *);
  297 (* DICT *);
  298 (* NULL *);
  299 (* VOID *);
  300 (* QUOTE *);
  301 (* LEFTBRACKET *);
  302 (* RIGHTBRACKET *);
  303 (* LEFTCURLYBRACKET *);
  304 (* RIGHTCURLYBRACKET *);
  305 (* LEFTROUNDBRACKET *);
  306 (* RIGHTROUNDBRACKET *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  307 (* ID *);
  308 (* INT_LITERAL *);
  309 (* STRING_LITERAL *);
  310 (* FLOAT_LITERAL *);
  311 (* BOOL_LITERAL *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\007\000\007\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\009\000\009\000\009\000\010\000\005\000\006\000\006\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\014\000\014\000\014\000\016\000\016\000\017\000\018\000\
\015\000\015\000\015\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\011\000\011\000\
\011\000\011\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\001\000\002\000\003\000\011\000\
\011\000\007\000\007\000\002\000\002\000\004\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\000\000\001\000\003\000\002\000\008\000\000\000\001\000\
\001\000\001\000\001\000\001\000\004\000\001\000\003\000\007\000\
\003\000\003\000\003\000\004\000\004\000\004\000\004\000\004\000\
\006\000\000\000\001\000\003\000\003\000\005\000\003\000\003\000\
\000\000\001\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\002\000\002\000\003\000\004\000\003\000\003\000\003\000\005\000\
\003\000\003\000\005\000\003\000\003\000\005\000\001\000\001\000\
\001\000\001\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\099\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\022\000\
\000\000\000\000\000\000\015\000\000\000\000\000\000\000\001\000\
\000\000\095\000\097\000\096\000\098\000\003\000\000\000\005\000\
\000\000\000\000\041\000\043\000\044\000\000\000\000\000\000\000\
\000\000\000\000\042\000\000\000\000\000\000\000\000\000\000\000\
\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\066\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\012\000\000\000\000\000\
\000\000\000\000\000\000\007\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\049\000\000\000\000\000\
\050\000\051\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\087\000\000\000\090\000\000\000\
\093\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\053\000\054\000\056\000\055\000\045\000\028\000\
\029\000\030\000\031\000\032\000\033\000\023\000\024\000\025\000\
\026\000\027\000\000\000\000\000\067\000\052\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\000\
\018\000\019\000\020\000\021\000\016\000\000\000\000\000\035\000\
\002\000\000\000\002\000\000\000\000\000\000\000\063\000\000\000\
\000\000\000\000\000\000\037\000\000\000\000\000\000\000\000\000\
\000\000\057\000\000\000\000\000\000\000\036\000\002\000\000\000\
\000\000\011\000\000\000\048\000\000\000\000\000\000\000\000\000\
\038\000\002\000\002\000\000\000\000\000\009\000\008\000"

let yydgoto = "\002\000\
\003\000\004\000\030\000\058\000\032\000\090\000\033\000\034\000\
\183\000\184\000\035\000\036\000\037\000\059\000\061\000\169\000\
\133\000\062\000"

let yysindex = "\006\000\
\000\000\000\000\000\000\043\000\196\000\196\000\221\254\237\254\
\244\254\050\255\245\254\246\254\247\254\248\254\047\255\000\000\
\087\255\095\255\000\000\000\000\196\000\196\000\196\000\000\000\
\254\254\000\000\000\000\000\000\000\000\000\000\074\005\000\000\
\105\255\061\255\000\000\000\000\000\000\245\254\246\254\247\254\
\248\254\047\255\000\000\223\004\002\000\196\000\196\000\196\000\
\000\000\106\005\196\000\196\000\196\000\196\000\196\000\037\000\
\084\255\202\005\012\255\138\005\114\255\000\000\039\002\196\000\
\196\000\196\000\196\000\196\000\196\000\196\000\000\000\065\255\
\196\000\196\000\196\000\196\000\196\000\196\000\196\000\196\000\
\223\000\223\000\223\000\196\000\220\255\000\000\128\255\080\002\
\202\005\118\255\121\002\000\000\010\255\041\255\056\255\063\255\
\162\002\115\255\116\255\134\255\169\255\178\255\179\255\180\255\
\181\255\185\255\189\255\190\255\196\000\000\000\196\000\196\000\
\000\000\000\000\202\005\091\255\223\004\223\004\002\000\002\000\
\002\000\130\255\024\006\024\006\024\006\024\006\010\006\010\006\
\234\005\234\005\196\000\003\255\000\000\064\001\000\000\113\001\
\000\000\176\255\196\000\196\000\176\255\196\000\155\001\155\255\
\196\000\156\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\202\005\202\005\000\000\000\000\196\000\008\005\
\015\255\196\000\196\000\196\000\176\255\254\001\202\005\000\000\
\000\000\000\000\000\000\000\000\000\000\159\255\108\255\000\000\
\000\000\170\005\000\000\121\255\196\000\196\000\000\000\002\000\
\002\000\002\000\196\000\000\000\155\001\160\255\112\255\196\000\
\193\255\000\000\202\005\041\005\203\002\000\000\000\000\203\255\
\187\255\000\000\196\000\000\000\085\000\204\255\206\255\202\005\
\000\000\000\000\000\000\127\000\169\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\198\255\199\255\209\255\210\255\212\255\000\000\
\000\000\000\000\022\001\000\000\110\255\135\255\000\000\000\000\
\054\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\050\004\243\002\000\000\004\000\000\000\
\000\000\000\000\123\255\123\255\123\255\123\255\000\000\000\000\
\000\000\043\255\000\000\000\000\000\000\000\000\000\000\000\000\
\123\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\008\000\000\000\
\255\254\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\175\255\000\000\073\004\123\004\010\003\060\003\
\083\003\000\000\098\004\146\004\169\004\192\004\009\255\214\004\
\014\002\028\002\110\255\229\003\000\000\000\004\000\000\023\004\
\000\000\104\001\000\000\000\000\154\001\000\000\126\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\044\255\137\255\000\000\000\000\123\255\168\255\
\000\000\000\000\000\000\000\000\204\001\000\000\016\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\133\003\
\156\003\206\003\000\000\000\000\000\000\000\000\000\000\231\255\
\000\000\000\000\171\255\000\000\000\000\000\000\000\000\001\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\197\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\243\255\000\000\254\255\000\000\026\000\000\000\113\255\
\000\000\067\000\000\000\000\000\000\000\214\255\000\000\000\000\
\202\255\170\000"

let yytablesize = 1848
let yytable = "\182\000\
\010\000\031\000\044\000\045\000\040\000\064\000\001\000\050\000\
\093\000\094\000\095\000\096\000\072\000\046\000\072\000\072\000\
\109\000\072\000\109\000\060\000\063\000\190\000\116\000\072\000\
\072\000\072\000\072\000\135\000\137\000\047\000\081\000\082\000\
\083\000\084\000\085\000\170\000\048\000\051\000\052\000\053\000\
\054\000\072\000\024\000\088\000\089\000\091\000\065\000\109\000\
\040\000\059\000\060\000\005\000\097\000\182\000\072\000\049\000\
\072\000\110\000\072\000\147\000\191\000\115\000\109\000\117\000\
\118\000\119\000\120\000\121\000\006\000\109\000\123\000\124\000\
\125\000\126\000\127\000\128\000\129\000\130\000\132\000\134\000\
\136\000\138\000\141\000\038\000\039\000\040\000\041\000\042\000\
\059\000\060\000\148\000\043\000\059\000\060\000\021\000\055\000\
\022\000\109\000\023\000\056\000\025\000\026\000\027\000\028\000\
\029\000\149\000\163\000\057\000\164\000\060\000\086\000\087\000\
\150\000\005\000\197\000\122\000\058\000\104\000\105\000\106\000\
\112\000\107\000\108\000\145\000\188\000\152\000\153\000\109\000\
\168\000\058\000\006\000\007\000\034\000\008\000\009\000\142\000\
\173\000\174\000\010\000\175\000\166\000\065\000\186\000\064\000\
\154\000\011\000\012\000\013\000\014\000\015\000\016\000\017\000\
\018\000\019\000\020\000\058\000\021\000\198\000\022\000\208\000\
\023\000\113\000\025\000\026\000\027\000\028\000\029\000\192\000\
\193\000\194\000\202\000\199\000\058\000\201\000\059\000\034\000\
\143\000\061\000\167\000\155\000\047\000\047\000\065\000\047\000\
\064\000\072\000\203\000\204\000\156\000\157\000\158\000\159\000\
\205\000\213\000\005\000\160\000\031\000\089\000\031\000\161\000\
\162\000\185\000\187\000\062\000\220\000\221\000\207\000\047\000\
\216\000\196\000\031\000\006\000\007\000\059\000\008\000\009\000\
\061\000\031\000\031\000\010\000\047\000\005\000\047\000\214\000\
\047\000\209\000\011\000\012\000\013\000\014\000\015\000\016\000\
\017\000\018\000\019\000\020\000\215\000\021\000\006\000\022\000\
\210\000\023\000\062\000\025\000\026\000\027\000\028\000\029\000\
\017\000\018\000\218\000\139\000\219\000\038\000\039\000\040\000\
\041\000\042\000\010\000\019\000\020\000\043\000\021\000\206\000\
\021\000\039\000\022\000\072\000\140\000\013\000\025\000\026\000\
\027\000\028\000\029\000\010\000\010\000\014\000\010\000\010\000\
\039\000\165\000\000\000\010\000\000\000\081\000\082\000\083\000\
\084\000\085\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\005\000\010\000\000\000\010\000\
\010\000\010\000\000\000\010\000\010\000\010\000\010\000\010\000\
\000\000\000\000\000\000\000\000\000\000\006\000\007\000\000\000\
\008\000\009\000\000\000\000\000\000\000\010\000\098\000\099\000\
\100\000\101\000\102\000\103\000\011\000\012\000\013\000\014\000\
\015\000\016\000\017\000\018\000\019\000\020\000\005\000\021\000\
\000\000\022\000\000\000\023\000\000\000\025\000\026\000\027\000\
\028\000\029\000\000\000\000\000\000\000\000\000\000\000\006\000\
\007\000\000\000\008\000\009\000\000\000\000\000\000\000\010\000\
\000\000\000\000\000\000\000\000\000\000\000\000\011\000\012\000\
\013\000\014\000\015\000\016\000\017\000\018\000\019\000\020\000\
\005\000\021\000\000\000\022\000\217\000\023\000\000\000\025\000\
\026\000\027\000\028\000\029\000\000\000\000\000\000\000\000\000\
\000\000\006\000\007\000\000\000\008\000\009\000\000\000\000\000\
\000\000\010\000\000\000\000\000\000\000\000\000\000\000\000\000\
\011\000\012\000\013\000\014\000\015\000\016\000\017\000\018\000\
\019\000\020\000\005\000\021\000\000\000\022\000\222\000\023\000\
\000\000\025\000\026\000\027\000\028\000\029\000\000\000\000\000\
\000\000\000\000\000\000\006\000\007\000\000\000\008\000\009\000\
\000\000\000\000\000\000\010\000\000\000\005\000\000\000\000\000\
\000\000\000\000\011\000\012\000\013\000\014\000\015\000\016\000\
\017\000\018\000\019\000\020\000\000\000\021\000\006\000\022\000\
\223\000\023\000\000\000\025\000\026\000\027\000\028\000\029\000\
\005\000\000\000\000\000\000\000\000\000\038\000\039\000\040\000\
\041\000\042\000\000\000\000\000\000\000\043\000\000\000\000\000\
\021\000\006\000\022\000\000\000\023\000\000\000\025\000\026\000\
\027\000\028\000\029\000\000\000\000\000\000\000\000\000\000\000\
\038\000\039\000\040\000\041\000\042\000\000\000\000\000\000\000\
\043\000\000\000\000\000\131\000\000\000\022\000\000\000\023\000\
\000\000\025\000\026\000\027\000\028\000\029\000\042\000\042\000\
\042\000\042\000\042\000\042\000\000\000\000\000\000\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\042\000\042\000\042\000\042\000\042\000\046\000\046\000\
\046\000\046\000\046\000\046\000\046\000\000\000\046\000\046\000\
\046\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
\016\000\072\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\046\000\046\000\046\000\046\000\046\000\046\000\000\000\
\000\000\000\000\000\000\081\000\082\000\083\000\084\000\085\000\
\171\000\000\000\000\000\046\000\000\000\046\000\000\000\046\000\
\083\000\083\000\083\000\083\000\083\000\083\000\083\000\000\000\
\083\000\000\000\083\000\083\000\083\000\083\000\083\000\083\000\
\083\000\083\000\072\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\083\000\083\000\083\000\083\000\083\000\
\083\000\000\000\000\000\000\000\081\000\082\000\083\000\084\000\
\085\000\172\000\000\000\000\000\000\000\083\000\000\000\083\000\
\000\000\083\000\085\000\085\000\085\000\085\000\085\000\085\000\
\085\000\000\000\085\000\000\000\085\000\085\000\085\000\085\000\
\085\000\085\000\085\000\085\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\085\000\085\000\085\000\
\085\000\085\000\085\000\000\000\176\000\177\000\178\000\179\000\
\180\000\016\000\017\000\018\000\181\000\020\000\000\000\085\000\
\000\000\085\000\000\000\085\000\084\000\084\000\084\000\084\000\
\084\000\084\000\084\000\000\000\084\000\000\000\084\000\084\000\
\084\000\084\000\084\000\084\000\084\000\084\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\084\000\
\084\000\084\000\084\000\084\000\084\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\084\000\000\000\084\000\000\000\084\000\066\000\067\000\
\068\000\069\000\070\000\000\000\195\000\000\000\000\000\072\000\
\073\000\074\000\075\000\076\000\077\000\078\000\079\000\080\000\
\000\000\000\000\000\000\078\000\078\000\000\000\078\000\000\000\
\000\000\081\000\082\000\083\000\084\000\085\000\078\000\078\000\
\000\000\080\000\080\000\000\000\080\000\000\000\000\000\066\000\
\067\000\068\000\069\000\070\000\080\000\080\000\078\000\114\000\
\072\000\073\000\074\000\075\000\076\000\077\000\078\000\079\000\
\080\000\000\000\000\000\078\000\080\000\078\000\000\000\078\000\
\000\000\000\000\081\000\082\000\083\000\084\000\085\000\000\000\
\000\000\080\000\000\000\080\000\000\000\080\000\000\000\000\000\
\066\000\067\000\068\000\069\000\070\000\000\000\000\000\000\000\
\114\000\072\000\073\000\074\000\075\000\076\000\077\000\078\000\
\079\000\080\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\081\000\082\000\083\000\084\000\085\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\066\000\067\000\068\000\069\000\070\000\000\000\000\000\
\000\000\144\000\072\000\073\000\074\000\075\000\076\000\077\000\
\078\000\079\000\080\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\081\000\082\000\083\000\084\000\
\085\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\066\000\067\000\068\000\069\000\070\000\000\000\
\000\000\000\000\146\000\072\000\073\000\074\000\075\000\076\000\
\077\000\078\000\079\000\080\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\081\000\082\000\083\000\
\084\000\085\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\066\000\067\000\068\000\069\000\070\000\
\000\000\000\000\000\000\151\000\072\000\073\000\074\000\075\000\
\076\000\077\000\078\000\079\000\080\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\081\000\082\000\
\083\000\084\000\085\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\081\000\081\000\081\000\081\000\081\000\
\081\000\081\000\000\000\081\000\212\000\081\000\081\000\081\000\
\081\000\081\000\081\000\081\000\081\000\000\000\000\000\000\000\
\000\000\000\000\070\000\070\000\070\000\070\000\070\000\070\000\
\070\000\000\000\070\000\081\000\070\000\070\000\070\000\070\000\
\070\000\070\000\070\000\070\000\000\000\000\000\000\000\000\000\
\081\000\000\000\081\000\000\000\081\000\000\000\000\000\000\000\
\000\000\000\000\070\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\070\000\
\000\000\070\000\000\000\070\000\071\000\071\000\071\000\071\000\
\071\000\071\000\071\000\000\000\071\000\000\000\071\000\071\000\
\071\000\071\000\071\000\071\000\071\000\071\000\000\000\000\000\
\000\000\000\000\000\000\079\000\079\000\079\000\079\000\079\000\
\079\000\079\000\000\000\079\000\071\000\079\000\079\000\079\000\
\079\000\079\000\079\000\079\000\079\000\000\000\000\000\000\000\
\000\000\071\000\000\000\071\000\000\000\071\000\000\000\000\000\
\000\000\000\000\000\000\079\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\079\000\000\000\079\000\000\000\079\000\088\000\088\000\088\000\
\088\000\088\000\088\000\088\000\000\000\088\000\000\000\088\000\
\088\000\088\000\088\000\088\000\088\000\088\000\088\000\000\000\
\000\000\000\000\000\000\000\000\091\000\091\000\091\000\091\000\
\091\000\091\000\091\000\000\000\091\000\088\000\091\000\091\000\
\091\000\091\000\091\000\091\000\091\000\091\000\000\000\000\000\
\000\000\000\000\088\000\000\000\088\000\000\000\088\000\000\000\
\000\000\000\000\000\000\000\000\091\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\091\000\000\000\091\000\000\000\091\000\094\000\094\000\
\094\000\094\000\094\000\094\000\094\000\000\000\094\000\000\000\
\094\000\094\000\094\000\094\000\094\000\094\000\094\000\094\000\
\000\000\000\000\000\000\000\000\000\000\086\000\086\000\086\000\
\086\000\086\000\086\000\086\000\000\000\086\000\094\000\086\000\
\086\000\086\000\086\000\086\000\086\000\086\000\086\000\000\000\
\000\000\000\000\000\000\094\000\000\000\094\000\000\000\094\000\
\089\000\089\000\089\000\089\000\089\000\089\000\089\000\000\000\
\089\000\000\000\089\000\089\000\089\000\089\000\089\000\089\000\
\089\000\089\000\086\000\000\000\086\000\000\000\086\000\092\000\
\092\000\092\000\092\000\092\000\092\000\092\000\000\000\092\000\
\000\000\092\000\092\000\092\000\092\000\092\000\092\000\092\000\
\092\000\000\000\000\000\000\000\000\000\089\000\000\000\089\000\
\000\000\089\000\082\000\082\000\000\000\000\000\000\000\082\000\
\082\000\000\000\082\000\000\000\082\000\082\000\082\000\082\000\
\082\000\082\000\082\000\082\000\092\000\000\000\092\000\000\000\
\092\000\068\000\068\000\000\000\000\000\000\000\068\000\068\000\
\000\000\068\000\082\000\068\000\068\000\068\000\068\000\068\000\
\068\000\068\000\068\000\000\000\000\000\000\000\000\000\082\000\
\000\000\082\000\000\000\082\000\000\000\000\000\000\000\076\000\
\076\000\068\000\076\000\000\000\076\000\076\000\076\000\076\000\
\076\000\076\000\076\000\076\000\000\000\000\000\068\000\000\000\
\068\000\000\000\068\000\069\000\069\000\000\000\000\000\000\000\
\069\000\069\000\076\000\069\000\000\000\069\000\069\000\069\000\
\069\000\069\000\069\000\069\000\069\000\000\000\000\000\076\000\
\000\000\076\000\000\000\076\000\000\000\000\000\000\000\077\000\
\077\000\000\000\077\000\069\000\077\000\077\000\077\000\077\000\
\077\000\077\000\077\000\077\000\000\000\000\000\000\000\000\000\
\069\000\000\000\069\000\000\000\069\000\000\000\074\000\074\000\
\000\000\074\000\077\000\074\000\074\000\074\000\074\000\074\000\
\074\000\074\000\074\000\000\000\000\000\000\000\000\000\077\000\
\000\000\077\000\000\000\077\000\000\000\075\000\075\000\000\000\
\075\000\074\000\075\000\075\000\075\000\075\000\075\000\075\000\
\075\000\075\000\000\000\000\000\000\000\000\000\074\000\000\000\
\074\000\000\000\074\000\073\000\073\000\000\000\073\000\000\000\
\075\000\068\000\069\000\070\000\073\000\073\000\073\000\073\000\
\072\000\000\000\000\000\000\000\000\000\075\000\000\000\075\000\
\000\000\075\000\000\000\000\000\000\000\000\000\073\000\000\000\
\000\000\000\000\081\000\082\000\083\000\084\000\085\000\000\000\
\000\000\000\000\000\000\073\000\000\000\073\000\000\000\073\000\
\066\000\067\000\068\000\069\000\070\000\000\000\000\000\000\000\
\000\000\072\000\073\000\074\000\075\000\076\000\077\000\078\000\
\079\000\080\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\081\000\082\000\083\000\084\000\085\000\
\189\000\066\000\067\000\068\000\069\000\070\000\000\000\000\000\
\000\000\000\000\072\000\073\000\074\000\075\000\076\000\077\000\
\078\000\079\000\080\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\081\000\082\000\083\000\084\000\
\085\000\211\000\066\000\067\000\068\000\069\000\070\000\071\000\
\000\000\000\000\000\000\072\000\073\000\074\000\075\000\076\000\
\077\000\078\000\079\000\080\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\081\000\082\000\083\000\
\084\000\085\000\066\000\067\000\068\000\069\000\070\000\092\000\
\000\000\000\000\000\000\072\000\073\000\074\000\075\000\076\000\
\077\000\078\000\079\000\080\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\081\000\082\000\083\000\
\084\000\085\000\066\000\067\000\068\000\069\000\070\000\000\000\
\000\000\000\000\111\000\072\000\073\000\074\000\075\000\076\000\
\077\000\078\000\079\000\080\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\081\000\082\000\083\000\
\084\000\085\000\066\000\067\000\068\000\069\000\070\000\200\000\
\000\000\000\000\000\000\072\000\073\000\074\000\075\000\076\000\
\077\000\078\000\079\000\080\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\081\000\082\000\083\000\
\084\000\085\000\066\000\067\000\068\000\069\000\070\000\000\000\
\000\000\000\000\000\000\072\000\073\000\074\000\075\000\076\000\
\077\000\078\000\079\000\080\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\081\000\082\000\083\000\
\084\000\085\000\066\000\067\000\068\000\069\000\070\000\000\000\
\000\000\000\000\000\000\072\000\073\000\074\000\075\000\076\000\
\077\000\078\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\081\000\082\000\083\000\
\084\000\085\000\066\000\067\000\068\000\069\000\070\000\000\000\
\000\000\000\000\000\000\072\000\073\000\074\000\075\000\076\000\
\066\000\067\000\068\000\069\000\070\000\000\000\000\000\000\000\
\000\000\072\000\000\000\000\000\000\000\081\000\082\000\083\000\
\084\000\085\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\081\000\082\000\083\000\084\000\085\000"

let yycheck = "\143\000\
\000\000\004\000\005\000\006\000\006\001\008\001\001\000\010\000\
\051\000\052\000\053\000\054\000\010\001\049\001\006\001\007\001\
\007\001\009\001\007\001\022\000\023\000\007\001\065\000\015\001\
\016\001\017\001\018\001\082\000\083\000\049\001\028\001\029\001\
\030\001\031\001\032\001\033\001\049\001\049\001\049\001\049\001\
\049\001\033\001\000\000\046\000\047\000\048\000\049\001\007\001\
\050\001\007\001\007\001\002\001\055\000\197\000\046\001\006\001\
\048\001\046\001\050\001\050\001\046\001\064\000\007\001\066\000\
\067\000\068\000\069\000\070\000\019\001\007\001\073\000\074\000\
\075\000\076\000\077\000\078\000\079\000\080\000\081\000\082\000\
\083\000\084\000\085\000\034\001\035\001\036\001\037\001\038\001\
\046\001\046\001\050\001\042\001\050\001\050\001\045\001\049\001\
\047\001\007\001\049\001\013\001\051\001\052\001\053\001\054\001\
\055\001\050\001\109\000\013\001\111\000\112\000\006\001\051\001\
\050\001\002\001\007\001\051\001\007\001\034\001\035\001\036\001\
\007\001\038\001\039\001\006\001\167\000\011\001\011\001\007\001\
\131\000\007\001\019\001\020\001\007\001\022\001\023\001\008\001\
\139\000\140\000\027\001\142\000\050\001\007\001\145\000\007\001\
\011\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\046\001\045\001\050\001\047\001\048\001\
\049\001\048\001\051\001\052\001\053\001\054\001\055\001\170\000\
\171\000\172\000\050\001\185\000\050\001\187\000\007\001\050\001\
\049\001\007\001\049\001\011\001\006\001\007\001\048\001\009\001\
\048\001\010\001\189\000\190\000\011\001\011\001\011\001\011\001\
\195\000\207\000\002\001\011\001\199\000\200\000\201\000\011\001\
\011\001\047\001\047\001\007\001\218\000\219\000\047\001\033\001\
\211\000\051\001\213\000\019\001\020\001\046\001\022\001\023\001\
\046\001\220\000\221\000\027\001\046\001\002\001\048\001\021\001\
\050\001\200\000\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\050\001\045\001\019\001\047\001\
\048\001\049\001\046\001\051\001\052\001\053\001\054\001\055\001\
\051\001\051\001\047\001\032\001\047\001\034\001\035\001\036\001\
\037\001\038\001\002\001\051\001\051\001\042\001\051\001\197\000\
\045\001\006\001\047\001\010\001\049\001\006\001\051\001\052\001\
\053\001\054\001\055\001\019\001\020\001\006\001\022\001\023\001\
\050\001\112\000\255\255\027\001\255\255\028\001\029\001\030\001\
\031\001\032\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\002\001\045\001\255\255\047\001\
\048\001\049\001\255\255\051\001\052\001\053\001\054\001\055\001\
\255\255\255\255\255\255\255\255\255\255\019\001\020\001\255\255\
\022\001\023\001\255\255\255\255\255\255\027\001\034\001\035\001\
\036\001\037\001\038\001\039\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\002\001\045\001\
\255\255\047\001\255\255\049\001\255\255\051\001\052\001\053\001\
\054\001\055\001\255\255\255\255\255\255\255\255\255\255\019\001\
\020\001\255\255\022\001\023\001\255\255\255\255\255\255\027\001\
\255\255\255\255\255\255\255\255\255\255\255\255\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\002\001\045\001\255\255\047\001\048\001\049\001\255\255\051\001\
\052\001\053\001\054\001\055\001\255\255\255\255\255\255\255\255\
\255\255\019\001\020\001\255\255\022\001\023\001\255\255\255\255\
\255\255\027\001\255\255\255\255\255\255\255\255\255\255\255\255\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\002\001\045\001\255\255\047\001\048\001\049\001\
\255\255\051\001\052\001\053\001\054\001\055\001\255\255\255\255\
\255\255\255\255\255\255\019\001\020\001\255\255\022\001\023\001\
\255\255\255\255\255\255\027\001\255\255\002\001\255\255\255\255\
\255\255\255\255\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\255\255\045\001\019\001\047\001\
\048\001\049\001\255\255\051\001\052\001\053\001\054\001\055\001\
\002\001\255\255\255\255\255\255\255\255\034\001\035\001\036\001\
\037\001\038\001\255\255\255\255\255\255\042\001\255\255\255\255\
\045\001\019\001\047\001\255\255\049\001\255\255\051\001\052\001\
\053\001\054\001\055\001\255\255\255\255\255\255\255\255\255\255\
\034\001\035\001\036\001\037\001\038\001\255\255\255\255\255\255\
\042\001\255\255\255\255\045\001\255\255\047\001\255\255\049\001\
\255\255\051\001\052\001\053\001\054\001\055\001\001\001\002\001\
\003\001\004\001\005\001\006\001\255\255\255\255\255\255\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\028\001\029\001\030\001\031\001\032\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\255\255\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\051\001\010\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\028\001\029\001\030\001\031\001\032\001\033\001\255\255\
\255\255\255\255\255\255\028\001\029\001\030\001\031\001\032\001\
\033\001\255\255\255\255\046\001\255\255\048\001\255\255\050\001\
\001\001\002\001\003\001\004\001\005\001\006\001\007\001\255\255\
\009\001\255\255\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\010\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\028\001\029\001\030\001\031\001\032\001\
\033\001\255\255\255\255\255\255\028\001\029\001\030\001\031\001\
\032\001\033\001\255\255\255\255\255\255\046\001\255\255\048\001\
\255\255\050\001\001\001\002\001\003\001\004\001\005\001\006\001\
\007\001\255\255\009\001\255\255\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\028\001\029\001\030\001\
\031\001\032\001\033\001\255\255\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\255\255\046\001\
\255\255\048\001\255\255\050\001\001\001\002\001\003\001\004\001\
\005\001\006\001\007\001\255\255\009\001\255\255\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\028\001\
\029\001\030\001\031\001\032\001\033\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\046\001\255\255\048\001\255\255\050\001\001\001\002\001\
\003\001\004\001\005\001\255\255\007\001\255\255\255\255\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\255\255\255\255\255\255\006\001\007\001\255\255\009\001\255\255\
\255\255\028\001\029\001\030\001\031\001\032\001\017\001\018\001\
\255\255\006\001\007\001\255\255\009\001\255\255\255\255\001\001\
\002\001\003\001\004\001\005\001\017\001\018\001\033\001\050\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\255\255\255\255\046\001\033\001\048\001\255\255\050\001\
\255\255\255\255\028\001\029\001\030\001\031\001\032\001\255\255\
\255\255\046\001\255\255\048\001\255\255\050\001\255\255\255\255\
\001\001\002\001\003\001\004\001\005\001\255\255\255\255\255\255\
\050\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\028\001\029\001\030\001\031\001\032\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\255\255\050\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\028\001\029\001\030\001\031\001\
\032\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\001\001\002\001\003\001\004\001\005\001\255\255\
\255\255\255\255\050\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\028\001\029\001\030\001\
\031\001\032\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\001\001\002\001\003\001\004\001\005\001\
\255\255\255\255\255\255\050\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\028\001\029\001\
\030\001\031\001\032\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\001\001\002\001\003\001\004\001\005\001\
\006\001\007\001\255\255\009\001\050\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\255\255\255\255\
\255\255\255\255\001\001\002\001\003\001\004\001\005\001\006\001\
\007\001\255\255\009\001\033\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\255\255\255\255\255\255\255\255\
\046\001\255\255\048\001\255\255\050\001\255\255\255\255\255\255\
\255\255\255\255\033\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\046\001\
\255\255\048\001\255\255\050\001\001\001\002\001\003\001\004\001\
\005\001\006\001\007\001\255\255\009\001\255\255\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\255\255\
\255\255\255\255\255\255\001\001\002\001\003\001\004\001\005\001\
\006\001\007\001\255\255\009\001\033\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\255\255\255\255\
\255\255\046\001\255\255\048\001\255\255\050\001\255\255\255\255\
\255\255\255\255\255\255\033\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\046\001\255\255\048\001\255\255\050\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\255\255\009\001\255\255\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\255\255\
\255\255\255\255\255\255\255\255\001\001\002\001\003\001\004\001\
\005\001\006\001\007\001\255\255\009\001\033\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\255\255\
\255\255\255\255\046\001\255\255\048\001\255\255\050\001\255\255\
\255\255\255\255\255\255\255\255\033\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\046\001\255\255\048\001\255\255\050\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\255\255\009\001\255\255\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\255\255\255\255\255\255\255\255\255\255\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\255\255\009\001\033\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\255\255\
\255\255\255\255\255\255\046\001\255\255\048\001\255\255\050\001\
\001\001\002\001\003\001\004\001\005\001\006\001\007\001\255\255\
\009\001\255\255\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\046\001\255\255\048\001\255\255\050\001\001\001\
\002\001\003\001\004\001\005\001\006\001\007\001\255\255\009\001\
\255\255\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\255\255\255\255\255\255\255\255\046\001\255\255\048\001\
\255\255\050\001\001\001\002\001\255\255\255\255\255\255\006\001\
\007\001\255\255\009\001\255\255\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\046\001\255\255\048\001\255\255\
\050\001\001\001\002\001\255\255\255\255\255\255\006\001\007\001\
\255\255\009\001\033\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\255\255\255\255\255\255\046\001\
\255\255\048\001\255\255\050\001\255\255\255\255\255\255\006\001\
\007\001\033\001\009\001\255\255\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\255\255\255\255\046\001\255\255\
\048\001\255\255\050\001\001\001\002\001\255\255\255\255\255\255\
\006\001\007\001\033\001\009\001\255\255\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\255\255\046\001\
\255\255\048\001\255\255\050\001\255\255\255\255\255\255\006\001\
\007\001\255\255\009\001\033\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\255\255\255\255\255\255\255\255\
\046\001\255\255\048\001\255\255\050\001\255\255\006\001\007\001\
\255\255\009\001\033\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\255\255\255\255\255\255\046\001\
\255\255\048\001\255\255\050\001\255\255\006\001\007\001\255\255\
\009\001\033\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\255\255\255\255\255\255\255\255\046\001\255\255\
\048\001\255\255\050\001\006\001\007\001\255\255\009\001\255\255\
\033\001\003\001\004\001\005\001\015\001\016\001\017\001\018\001\
\010\001\255\255\255\255\255\255\255\255\046\001\255\255\048\001\
\255\255\050\001\255\255\255\255\255\255\255\255\033\001\255\255\
\255\255\255\255\028\001\029\001\030\001\031\001\032\001\255\255\
\255\255\255\255\255\255\046\001\255\255\048\001\255\255\050\001\
\001\001\002\001\003\001\004\001\005\001\255\255\255\255\255\255\
\255\255\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\028\001\029\001\030\001\031\001\032\001\
\033\001\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\255\255\255\255\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\028\001\029\001\030\001\031\001\
\032\001\033\001\001\001\002\001\003\001\004\001\005\001\006\001\
\255\255\255\255\255\255\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\028\001\029\001\030\001\
\031\001\032\001\001\001\002\001\003\001\004\001\005\001\006\001\
\255\255\255\255\255\255\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\028\001\029\001\030\001\
\031\001\032\001\001\001\002\001\003\001\004\001\005\001\255\255\
\255\255\255\255\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\028\001\029\001\030\001\
\031\001\032\001\001\001\002\001\003\001\004\001\005\001\006\001\
\255\255\255\255\255\255\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\028\001\029\001\030\001\
\031\001\032\001\001\001\002\001\003\001\004\001\005\001\255\255\
\255\255\255\255\255\255\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\028\001\029\001\030\001\
\031\001\032\001\001\001\002\001\003\001\004\001\005\001\255\255\
\255\255\255\255\255\255\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\028\001\029\001\030\001\
\031\001\032\001\001\001\002\001\003\001\004\001\005\001\255\255\
\255\255\255\255\255\255\010\001\011\001\012\001\013\001\014\001\
\001\001\002\001\003\001\004\001\005\001\255\255\255\255\255\255\
\255\255\010\001\255\255\255\255\255\255\028\001\029\001\030\001\
\031\001\032\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\028\001\029\001\030\001\031\001\032\001"

let yynames_const = "\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  MOD\000\
  SEMICOLUMN\000\
  SEQUENCE\000\
  ASSIGN\000\
  COLUMN\000\
  DOT\000\
  GREATER\000\
  GREATEREQUAL\000\
  SMALLER\000\
  SMALLEREQUAL\000\
  EQUAL\000\
  NOTEQUAL\000\
  AND\000\
  OR\000\
  NOT\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  BREAK\000\
  CONTINUE\000\
  IN\000\
  RETURN\000\
  LINK\000\
  RIGHTLINK\000\
  LEFTLINK\000\
  SIMILARITY\000\
  AT\000\
  AMPERSAND\000\
  INT\000\
  FLOAT\000\
  STRING\000\
  BOOL\000\
  NODE\000\
  GRAPH\000\
  LIST\000\
  DICT\000\
  NULL\000\
  VOID\000\
  QUOTE\000\
  LEFTBRACKET\000\
  RIGHTBRACKET\000\
  LEFTCURLYBRACKET\000\
  RIGHTCURLYBRACKET\000\
  LEFTROUNDBRACKET\000\
  RIGHTROUNDBRACKET\000\
  EOF\000\
  "

let yynames_block = "\
  ID\000\
  INT_LITERAL\000\
  STRING_LITERAL\000\
  FLOAT_LITERAL\000\
  BOOL_LITERAL\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 61 "parser.mly"
                                        ( List.rev _1 )
# 793 "parser.ml"
               :  Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 64 "parser.mly"
                                        ( [] )
# 799 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 65 "parser.mly"
                                        ( _2 :: _1 )
# 807 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 68 "parser.mly"
                                        ( Expr(_1) )
# 814 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'func_decl) in
    Obj.repr(
# 69 "parser.mly"
                                        ( Func(_1) )
# 821 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 70 "parser.mly"
                                   ( Return(Noexpr) )
# 827 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 71 "parser.mly"
                                        ( Return(_2) )
# 834 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 8 : 'for_expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 'for_expr) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 73 "parser.mly"
  (For(_3, _5, _7, List.rev _10))
# 844 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 8 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 5 : 'stmt_list) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 75 "parser.mly"
  (If(_3,List.rev _6,List.rev _10))
# 853 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 77 "parser.mly"
  (If(_3,List.rev _6,[]))
# 861 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 79 "parser.mly"
  (While(_3, List.rev _6))
# 869 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'var_decl) in
    Obj.repr(
# 80 "parser.mly"
                                        ( Var_dec(_1))
# 876 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'var_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 83 "parser.mly"
                           ( Local(_1, _2, Noexpr) )
# 884 "parser.ml"
               : 'var_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'var_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 84 "parser.mly"
                           ( Local(_1, _2, _4) )
# 893 "parser.ml"
               : 'var_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 87 "parser.mly"
                        (Void_t)
# 899 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 88 "parser.mly"
                        (Null_t)
# 905 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 89 "parser.mly"
                (Int_t)
# 911 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 90 "parser.mly"
                (Float_t)
# 917 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 91 "parser.mly"
                 (String_t)
# 923 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 92 "parser.mly"
       (Bool_t)
# 929 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 93 "parser.mly"
       (Node_t)
# 935 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 94 "parser.mly"
        (Graph_t)
# 941 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 95 "parser.mly"
                           (Dict_Int_t)
# 947 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 96 "parser.mly"
                             (Dict_Float_t)
# 953 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 97 "parser.mly"
                              (Dict_String_t)
# 959 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 98 "parser.mly"
                            (Dict_Node_t)
# 965 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 99 "parser.mly"
                             (Dict_Graph_t)
# 971 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 100 "parser.mly"
                           (List_Int_t)
# 977 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 101 "parser.mly"
                             (List_Float_t)
# 983 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 102 "parser.mly"
                              (List_String_t)
# 989 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 103 "parser.mly"
                            (List_Bool_t)
# 995 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 104 "parser.mly"
                            (List_Node_t)
# 1001 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 105 "parser.mly"
                             (List_Graph_t)
# 1007 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 108 "parser.mly"
                              ( [] )
# 1013 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal) in
    Obj.repr(
# 109 "parser.mly"
                              ( [_1] )
# 1020 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'formal) in
    Obj.repr(
# 110 "parser.mly"
                              ( _3 :: _1 )
# 1028 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'var_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 114 "parser.mly"
                        ( Formal(_1, _2) )
# 1036 "parser.ml"
               : 'formal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'var_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'formal_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 117 "parser.mly"
                                                                                                          (
  {
    returnType = _1;
    name = _2;
    args = List.rev _4;
    body = List.rev _7;
  }
)
# 1053 "parser.ml"
               : 'func_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 129 "parser.mly"
                                        ( Noexpr )
# 1059 "parser.ml"
               : 'for_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 130 "parser.mly"
                                        ( _1 )
# 1066 "parser.ml"
               : 'for_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'literals) in
    Obj.repr(
# 133 "parser.mly"
           (_1)
# 1073 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 134 "parser.mly"
                                  ( Null )
# 1079 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arith_ops) in
    Obj.repr(
# 135 "parser.mly"
                                  ( _1 )
# 1086 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'graph_ops) in
    Obj.repr(
# 136 "parser.mly"
                                  ( _1 )
# 1093 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 137 "parser.mly"
                                               ( Node(_3) )
# 1100 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 138 "parser.mly"
                              ( Id(_1) )
# 1107 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 139 "parser.mly"
                              ( Assign(_1, _3) )
# 1115 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 140 "parser.mly"
                                                                ( EdgeAt(_1, _4, _6) )
# 1124 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'list) in
    Obj.repr(
# 141 "parser.mly"
                                     ( ListP(List.rev _2) )
# 1131 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'dict) in
    Obj.repr(
# 142 "parser.mly"
                                           ( DictP(List.rev _2) )
# 1138 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 143 "parser.mly"
                                           ( _2 )
# 1145 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'list) in
    Obj.repr(
# 144 "parser.mly"
                                                          ( Call(_1, List.rev _3) )
# 1153 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'list) in
    Obj.repr(
# 145 "parser.mly"
                                                           ( Call("int", List.rev _3) )
# 1160 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'list) in
    Obj.repr(
# 146 "parser.mly"
                                                             ( Call("float", List.rev _3) )
# 1167 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'list) in
    Obj.repr(
# 147 "parser.mly"
                                                            ( Call("bool", List.rev _3) )
# 1174 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'list) in
    Obj.repr(
# 148 "parser.mly"
                                                              ( Call("string", List.rev _3) )
# 1181 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'list) in
    Obj.repr(
# 149 "parser.mly"
                                                        (CallDefault(_1, _3, List.rev _5))
# 1190 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 153 "parser.mly"
                                        ( [] )
# 1196 "parser.ml"
               : 'list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 154 "parser.mly"
                                        ( [_1] )
# 1203 "parser.ml"
               : 'list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 155 "parser.mly"
                                        ( _3 :: _1 )
# 1211 "parser.ml"
               : 'list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 158 "parser.mly"
                              ( { graphs = [_3]; edges = [_1] } )
# 1219 "parser.ml"
               : 'list_graph))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'list_graph) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 160 "parser.mly"
    ( { graphs = _5 :: (_1).graphs; edges = _3 :: (_1).edges } )
# 1228 "parser.ml"
               : 'list_graph))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'list_graph) in
    Obj.repr(
# 163 "parser.mly"
                                        (
  { graphs = List.rev (_2).graphs; edges = List.rev (_2).edges }
)
# 1237 "parser.ml"
               : 'list_graph_literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 168 "parser.mly"
                   ( (_1, _3) )
# 1245 "parser.ml"
               : 'dict_key_value))
; (fun __caml_parser_env ->
    Obj.repr(
# 172 "parser.mly"
                                    ( [] )
# 1251 "parser.ml"
               : 'dict))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dict_key_value) in
    Obj.repr(
# 173 "parser.mly"
                             ( [_1] )
# 1258 "parser.ml"
               : 'dict))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dict) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dict_key_value) in
    Obj.repr(
# 174 "parser.mly"
                                  (_3 :: _1)
# 1266 "parser.ml"
               : 'dict))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 177 "parser.mly"
                              ( Binop(_1, Add,   _3) )
# 1274 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 178 "parser.mly"
                              ( Binop(_1, Sub,   _3) )
# 1282 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 179 "parser.mly"
                              ( Binop(_1, Mult,  _3) )
# 1290 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 180 "parser.mly"
                              ( Binop(_1, Div,   _3) )
# 1298 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 181 "parser.mly"
                              ( Binop(_1, Equal, _3) )
# 1306 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 182 "parser.mly"
                              ( Binop(_1, Neq,   _3) )
# 1314 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 183 "parser.mly"
                              ( Binop(_1, Less,  _3) )
# 1322 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 184 "parser.mly"
                              ( Binop(_1, Leq,   _3) )
# 1330 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 185 "parser.mly"
                              ( Binop(_1, Greater,  _3) )
# 1338 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 186 "parser.mly"
                              ( Binop(_1, Geq,   _3) )
# 1346 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 187 "parser.mly"
                              ( Binop(_1, And,   _3) )
# 1354 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 188 "parser.mly"
                              ( Binop(_1, Mod,   _3) )
# 1362 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 189 "parser.mly"
                                  ( Binop(_1, Or,    _3) )
# 1370 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 190 "parser.mly"
                           ( Unop (Not,   _2) )
# 1377 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 191 "parser.mly"
                            ( Unop (Neg, _2) )
# 1384 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 192 "parser.mly"
                                  ( Binop(_1, RootAs, _3) )
# 1392 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 193 "parser.mly"
                                  ( Binop(_1, ListEdgesAt, _4) )
# 1400 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 194 "parser.mly"
                                  ( Binop(_1, ListNodesAt, _3) )
# 1408 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 197 "parser.mly"
                                      ( Graph_Link(_1, Double_Link, _3, Null) )
# 1416 "parser.ml"
               : 'graph_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'list_graph_literal) in
    Obj.repr(
# 198 "parser.mly"
                                      ( Graph_Link(_1, Double_Link, ListP((_3).graphs), ListP((_3).edges)) )
# 1424 "parser.ml"
               : 'graph_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 199 "parser.mly"
                                      ( Graph_Link(_1, Double_Link, _5, _3) )
# 1433 "parser.ml"
               : 'graph_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 200 "parser.mly"
                                      ( Graph_Link(_1, Right_Link, _3, Null) )
# 1441 "parser.ml"
               : 'graph_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'list_graph_literal) in
    Obj.repr(
# 201 "parser.mly"
                                      ( Graph_Link(_1, Right_Link, ListP((_3).graphs), ListP((_3).edges)) )
# 1449 "parser.ml"
               : 'graph_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 202 "parser.mly"
                                      ( Graph_Link(_1, Right_Link, _5, _3) )
# 1458 "parser.ml"
               : 'graph_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 203 "parser.mly"
                                      ( Graph_Link(_1, Left_Link, _3, Null) )
# 1466 "parser.ml"
               : 'graph_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'list_graph_literal) in
    Obj.repr(
# 204 "parser.mly"
                                      ( Graph_Link(_1, Left_Link, ListP((_3).graphs), ListP((_3).edges)) )
# 1474 "parser.ml"
               : 'graph_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 205 "parser.mly"
                                      ( Graph_Link(_1, Left_Link, _5, _3) )
# 1483 "parser.ml"
               : 'graph_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 208 "parser.mly"
                    (Num_Lit( Num_Int(_1) ))
# 1490 "parser.ml"
               : 'literals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 209 "parser.mly"
                    (Num_Lit( Num_Float(_1) ))
# 1497 "parser.ml"
               : 'literals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 210 "parser.mly"
                     (String_Lit(_1) )
# 1504 "parser.ml"
               : 'literals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 211 "parser.mly"
                     (Bool_lit(_1) )
# 1511 "parser.ml"
               : 'literals))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf :  Ast.program)
