type token =
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | MOD
  | SEMICOLON
  | SEQUENCE
  | ASSIGN
  | COLON
  | DOT
  | GT
  | GEQ
  | LT
  | LEQ
  | EQ
  | NEQ
  | AND
  | OR
  | NOT
  | IF
  | ELSE
  | FOR
  | WHILE
  | BREAK
  | CONTINUE
  | IN
  | RETURN
  | RIGHTLINK
  | SIMILARITY
  | AT
  | AMPERSAND
  | INT
  | FLOAT
  | STRING
  | BOOL
  | NODE
  | EDGE
  | GRAPH
  | LIST
  | DICT
  | NULL
  | VOID
  | QUOTE
  | LBRACKET
  | RBRACKET
  | LBRACE
  | RBRACE
  | LPAREN
  | RPAREN
  | EOF
  | ID of (string)
  | INT_LITERAL of (int)
  | STRING_LITERAL of (string)
  | FLOAT_LITERAL of (float)
  | BOOL_LITERAL of (bool)

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
 open Ast 
# 63 "parser.ml"
let yytransl_const = [|
  257 (* PLUS *);
  258 (* MINUS *);
  259 (* TIMES *);
  260 (* DIVIDE *);
  261 (* MOD *);
  262 (* SEMICOLON *);
  263 (* SEQUENCE *);
  264 (* ASSIGN *);
  265 (* COLON *);
  266 (* DOT *);
  267 (* GT *);
  268 (* GEQ *);
  269 (* LT *);
  270 (* LEQ *);
  271 (* EQ *);
  272 (* NEQ *);
  273 (* AND *);
  274 (* OR *);
  275 (* NOT *);
  276 (* IF *);
  277 (* ELSE *);
  278 (* FOR *);
  279 (* WHILE *);
  280 (* BREAK *);
  281 (* CONTINUE *);
  282 (* IN *);
  283 (* RETURN *);
  284 (* RIGHTLINK *);
  285 (* SIMILARITY *);
  286 (* AT *);
  287 (* AMPERSAND *);
  288 (* INT *);
  289 (* FLOAT *);
  290 (* STRING *);
  291 (* BOOL *);
  292 (* NODE *);
  293 (* EDGE *);
  294 (* GRAPH *);
  295 (* LIST *);
  296 (* DICT *);
  297 (* NULL *);
  298 (* VOID *);
  299 (* QUOTE *);
  300 (* LBRACKET *);
  301 (* RBRACKET *);
  302 (* LBRACE *);
  303 (* RBRACE *);
  304 (* LPAREN *);
  305 (* RPAREN *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  306 (* ID *);
  307 (* INT_LITERAL *);
  308 (* STRING_LITERAL *);
  309 (* FLOAT_LITERAL *);
  310 (* BOOL_LITERAL *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\007\000\007\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\009\000\009\000\009\000\010\000\005\000\006\000\006\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\014\000\014\000\014\000\016\000\016\000\017\000\018\000\
\015\000\015\000\015\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\013\000\013\000\013\000\
\011\000\011\000\011\000\011\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\001\000\002\000\003\000\011\000\
\011\000\007\000\007\000\002\000\002\000\004\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\000\000\001\000\003\000\002\000\008\000\000\000\001\000\
\001\000\001\000\001\000\001\000\004\000\001\000\003\000\007\000\
\003\000\003\000\003\000\004\000\004\000\004\000\004\000\004\000\
\006\000\000\000\001\000\003\000\003\000\005\000\003\000\003\000\
\000\000\001\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\002\000\002\000\003\000\004\000\003\000\003\000\003\000\005\000\
\001\000\001\000\001\000\001\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\093\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\022\000\
\000\000\000\000\000\000\015\000\000\000\000\000\000\000\001\000\
\000\000\089\000\091\000\090\000\092\000\003\000\000\000\005\000\
\000\000\000\000\041\000\043\000\044\000\000\000\000\000\000\000\
\000\000\000\000\042\000\000\000\000\000\000\000\000\000\000\000\
\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\066\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\012\000\000\000\000\000\000\000\000\000\
\000\000\007\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\049\000\000\000\000\000\050\000\051\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\087\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\053\000\054\000\056\000\055\000\
\045\000\028\000\029\000\030\000\031\000\032\000\033\000\023\000\
\024\000\025\000\026\000\027\000\000\000\000\000\067\000\052\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\000\
\018\000\019\000\020\000\021\000\016\000\000\000\000\000\035\000\
\002\000\000\000\002\000\000\000\000\000\000\000\063\000\000\000\
\000\000\037\000\000\000\000\000\000\000\000\000\000\000\057\000\
\000\000\000\000\000\000\036\000\002\000\000\000\000\000\011\000\
\000\000\048\000\000\000\000\000\000\000\000\000\038\000\002\000\
\002\000\000\000\000\000\009\000\008\000"

let yydgoto = "\002\000\
\003\000\004\000\030\000\058\000\032\000\088\000\033\000\034\000\
\175\000\176\000\035\000\036\000\037\000\059\000\061\000\163\000\
\131\000\062\000"

let yysindex = "\013\000\
\000\000\000\000\000\000\042\000\227\000\227\000\223\254\230\254\
\232\254\050\255\234\254\235\254\237\254\238\254\243\254\000\000\
\023\255\024\255\000\000\000\000\227\000\227\000\227\000\000\000\
\087\255\000\000\000\000\000\000\000\000\000\000\067\004\000\000\
\032\255\245\254\000\000\000\000\000\000\234\254\235\254\237\254\
\238\254\243\254\000\000\211\004\166\255\227\000\227\000\227\000\
\000\000\088\004\227\000\227\000\227\000\227\000\227\000\236\255\
\034\000\152\004\018\255\110\004\102\255\000\000\202\002\227\000\
\227\000\227\000\227\000\227\000\227\000\227\000\000\000\246\254\
\227\000\227\000\227\000\227\000\227\000\227\000\227\000\227\000\
\250\000\227\000\191\000\000\000\108\255\232\002\152\004\035\255\
\254\002\000\000\255\254\000\255\010\255\011\255\028\003\086\255\
\088\255\100\255\104\255\106\255\107\255\109\255\111\255\112\255\
\114\255\118\255\227\000\000\000\227\000\227\000\000\000\000\000\
\152\004\021\255\211\004\211\004\166\255\166\255\166\255\065\255\
\208\004\208\004\208\004\208\004\194\004\194\004\173\004\173\004\
\227\000\003\255\000\000\123\255\227\000\227\000\123\255\227\000\
\215\000\068\255\227\000\101\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\152\004\152\004\000\000\000\000\
\227\000\014\004\129\255\227\000\123\255\150\002\152\004\000\000\
\000\000\000\000\000\000\000\000\000\000\095\255\040\255\000\000\
\000\000\131\004\000\000\043\255\227\000\227\000\000\000\166\255\
\227\000\000\000\215\000\122\255\119\255\227\000\183\255\000\000\
\152\004\036\004\050\003\000\000\000\000\156\255\135\255\000\000\
\227\000\000\000\083\000\140\255\144\255\152\004\000\000\000\000\
\000\000\124\000\165\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\141\255\142\255\143\255\147\255\148\255\000\000\
\000\000\000\000\237\255\000\000\133\255\103\255\000\000\000\000\
\048\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\080\003\244\001\000\000\194\255\000\000\
\000\000\000\000\044\255\044\255\044\255\044\255\000\000\000\000\
\000\000\009\255\000\000\000\000\000\000\000\000\000\000\000\000\
\044\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\198\255\000\000\250\254\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\081\255\000\000\101\003\150\003\009\002\058\002\079\002\000\000\
\074\001\123\001\172\001\124\003\169\003\195\003\214\003\221\003\
\133\255\180\002\000\000\097\001\000\000\000\000\146\001\000\000\
\099\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\012\255\117\255\000\000\000\000\
\044\255\136\255\000\000\000\000\195\001\000\000\201\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\002\
\000\000\000\000\000\000\000\000\000\000\162\255\000\000\000\000\
\137\255\000\000\000\000\000\000\000\000\001\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\168\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\049\000\000\000\254\255\000\000\022\000\000\000\124\255\
\000\000\027\000\000\000\000\000\000\000\214\255\000\000\000\000\
\000\000\110\000"

let yytablesize = 1521
let yytable = "\040\000\
\010\000\031\000\044\000\045\000\174\000\107\000\107\000\050\000\
\091\000\092\000\093\000\094\000\072\000\001\000\046\000\059\000\
\107\000\107\000\060\000\060\000\063\000\047\000\114\000\048\000\
\107\000\051\000\052\000\107\000\053\000\054\000\081\000\082\000\
\083\000\164\000\055\000\056\000\057\000\084\000\085\000\120\000\
\139\000\024\000\040\000\086\000\087\000\089\000\187\000\141\000\
\142\000\107\000\058\000\005\000\095\000\059\000\174\000\049\000\
\060\000\059\000\143\000\144\000\060\000\113\000\108\000\115\000\
\116\000\117\000\118\000\119\000\006\000\160\000\121\000\122\000\
\123\000\124\000\125\000\126\000\127\000\128\000\130\000\132\000\
\135\000\038\000\039\000\040\000\041\000\042\000\047\000\047\000\
\188\000\047\000\043\000\192\000\058\000\021\000\064\000\022\000\
\146\000\023\000\147\000\025\000\026\000\027\000\028\000\029\000\
\157\000\034\000\158\000\060\000\110\000\065\000\148\000\047\000\
\161\000\177\000\149\000\136\000\150\000\151\000\180\000\152\000\
\005\000\153\000\154\000\064\000\155\000\047\000\162\000\047\000\
\156\000\047\000\165\000\166\000\072\000\167\000\065\000\182\000\
\178\000\006\000\007\000\058\000\008\000\009\000\059\000\061\000\
\186\000\010\000\179\000\034\000\111\000\065\000\011\000\012\000\
\013\000\014\000\015\000\137\000\016\000\017\000\018\000\019\000\
\020\000\184\000\021\000\064\000\022\000\198\000\023\000\197\000\
\025\000\026\000\027\000\028\000\029\000\183\000\062\000\072\000\
\204\000\058\000\193\000\194\000\059\000\061\000\195\000\205\000\
\005\000\208\000\031\000\087\000\031\000\209\000\017\000\018\000\
\019\000\081\000\082\000\083\000\020\000\021\000\206\000\039\000\
\031\000\006\000\007\000\013\000\008\000\009\000\014\000\031\000\
\031\000\010\000\039\000\199\000\062\000\196\000\011\000\012\000\
\013\000\014\000\015\000\159\000\016\000\017\000\018\000\019\000\
\020\000\189\000\021\000\191\000\022\000\200\000\023\000\000\000\
\025\000\026\000\027\000\028\000\029\000\042\000\042\000\042\000\
\042\000\042\000\042\000\000\000\000\000\203\000\042\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\000\000\
\210\000\211\000\010\000\000\000\000\000\000\000\000\000\000\000\
\042\000\042\000\042\000\096\000\097\000\098\000\099\000\100\000\
\000\000\101\000\000\000\010\000\010\000\000\000\010\000\010\000\
\000\000\000\000\000\000\010\000\000\000\000\000\016\000\000\000\
\010\000\010\000\010\000\010\000\010\000\000\000\010\000\010\000\
\010\000\010\000\010\000\005\000\010\000\000\000\010\000\010\000\
\010\000\000\000\010\000\010\000\010\000\010\000\010\000\000\000\
\000\000\000\000\000\000\000\000\006\000\007\000\000\000\008\000\
\009\000\102\000\103\000\104\000\010\000\105\000\000\000\106\000\
\000\000\011\000\012\000\013\000\014\000\015\000\000\000\016\000\
\017\000\018\000\019\000\020\000\005\000\021\000\000\000\022\000\
\000\000\023\000\000\000\025\000\026\000\027\000\028\000\029\000\
\000\000\000\000\000\000\000\000\000\000\006\000\007\000\000\000\
\008\000\009\000\000\000\000\000\000\000\010\000\000\000\000\000\
\000\000\000\000\011\000\012\000\013\000\014\000\015\000\000\000\
\016\000\017\000\018\000\019\000\020\000\005\000\021\000\000\000\
\022\000\207\000\023\000\000\000\025\000\026\000\027\000\028\000\
\029\000\000\000\000\000\000\000\000\000\000\000\006\000\007\000\
\000\000\008\000\009\000\000\000\000\000\000\000\010\000\000\000\
\000\000\000\000\000\000\011\000\012\000\013\000\014\000\015\000\
\000\000\016\000\017\000\018\000\019\000\020\000\005\000\021\000\
\000\000\022\000\212\000\023\000\000\000\025\000\026\000\027\000\
\028\000\029\000\000\000\000\000\000\000\000\000\000\000\006\000\
\007\000\000\000\008\000\009\000\000\000\000\000\000\000\010\000\
\005\000\000\000\000\000\000\000\011\000\012\000\013\000\014\000\
\015\000\000\000\016\000\017\000\018\000\019\000\020\000\000\000\
\021\000\006\000\022\000\213\000\023\000\000\000\025\000\026\000\
\027\000\028\000\029\000\000\000\133\000\000\000\038\000\039\000\
\040\000\041\000\042\000\000\000\005\000\000\000\000\000\043\000\
\000\000\000\000\021\000\000\000\022\000\000\000\134\000\000\000\
\025\000\026\000\027\000\028\000\029\000\006\000\168\000\169\000\
\170\000\171\000\172\000\005\000\016\000\017\000\018\000\173\000\
\020\000\000\000\038\000\039\000\040\000\041\000\042\000\000\000\
\000\000\000\000\000\000\043\000\006\000\000\000\021\000\000\000\
\022\000\000\000\023\000\000\000\025\000\026\000\027\000\028\000\
\029\000\038\000\039\000\040\000\041\000\042\000\000\000\000\000\
\000\000\000\000\043\000\000\000\000\000\129\000\000\000\022\000\
\000\000\023\000\000\000\025\000\026\000\027\000\028\000\029\000\
\046\000\046\000\046\000\046\000\046\000\046\000\046\000\000\000\
\046\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
\046\000\046\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\046\000\046\000\046\000\046\000\076\000\
\076\000\000\000\076\000\000\000\076\000\076\000\076\000\076\000\
\076\000\076\000\076\000\076\000\046\000\000\000\046\000\000\000\
\046\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
\076\000\083\000\000\000\083\000\083\000\083\000\083\000\083\000\
\083\000\083\000\083\000\000\000\000\000\000\000\076\000\000\000\
\076\000\000\000\076\000\000\000\083\000\083\000\083\000\083\000\
\077\000\077\000\000\000\077\000\000\000\077\000\077\000\077\000\
\077\000\077\000\077\000\077\000\077\000\083\000\000\000\083\000\
\000\000\083\000\085\000\085\000\085\000\085\000\085\000\085\000\
\085\000\077\000\085\000\000\000\085\000\085\000\085\000\085\000\
\085\000\085\000\085\000\085\000\000\000\000\000\000\000\077\000\
\000\000\077\000\000\000\077\000\000\000\085\000\085\000\085\000\
\085\000\074\000\074\000\000\000\074\000\000\000\074\000\074\000\
\074\000\074\000\074\000\074\000\074\000\074\000\085\000\000\000\
\085\000\000\000\085\000\084\000\084\000\084\000\084\000\084\000\
\084\000\084\000\074\000\084\000\000\000\084\000\084\000\084\000\
\084\000\084\000\084\000\084\000\084\000\000\000\000\000\000\000\
\074\000\000\000\074\000\000\000\074\000\000\000\084\000\084\000\
\084\000\084\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\084\000\
\000\000\084\000\000\000\084\000\081\000\081\000\081\000\081\000\
\081\000\081\000\081\000\000\000\081\000\000\000\081\000\081\000\
\081\000\081\000\081\000\081\000\081\000\081\000\000\000\000\000\
\000\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
\000\000\070\000\081\000\070\000\070\000\070\000\070\000\070\000\
\070\000\070\000\070\000\000\000\000\000\000\000\000\000\000\000\
\081\000\000\000\081\000\000\000\081\000\000\000\000\000\070\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\070\000\000\000\070\000\
\000\000\070\000\071\000\071\000\071\000\071\000\071\000\071\000\
\071\000\000\000\071\000\000\000\071\000\071\000\071\000\071\000\
\071\000\071\000\071\000\071\000\000\000\000\000\000\000\079\000\
\079\000\079\000\079\000\079\000\079\000\079\000\000\000\079\000\
\071\000\079\000\079\000\079\000\079\000\079\000\079\000\079\000\
\079\000\000\000\000\000\000\000\000\000\000\000\071\000\000\000\
\071\000\000\000\071\000\000\000\000\000\079\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\079\000\000\000\079\000\000\000\079\000\
\088\000\088\000\088\000\088\000\088\000\088\000\088\000\000\000\
\088\000\000\000\088\000\088\000\088\000\088\000\088\000\088\000\
\088\000\088\000\000\000\000\000\000\000\000\000\066\000\067\000\
\068\000\069\000\070\000\000\000\185\000\000\000\088\000\072\000\
\073\000\074\000\075\000\076\000\077\000\078\000\079\000\080\000\
\000\000\000\000\000\000\000\000\088\000\000\000\088\000\000\000\
\088\000\081\000\082\000\083\000\086\000\086\000\086\000\086\000\
\086\000\086\000\086\000\000\000\086\000\000\000\086\000\086\000\
\086\000\086\000\086\000\086\000\086\000\086\000\112\000\000\000\
\000\000\000\000\066\000\067\000\068\000\069\000\070\000\000\000\
\000\000\000\000\000\000\072\000\073\000\074\000\075\000\076\000\
\077\000\078\000\079\000\080\000\000\000\000\000\000\000\000\000\
\086\000\000\000\086\000\000\000\086\000\081\000\082\000\083\000\
\066\000\067\000\068\000\069\000\070\000\000\000\000\000\000\000\
\000\000\072\000\073\000\074\000\075\000\076\000\077\000\078\000\
\079\000\080\000\112\000\000\000\000\000\000\000\066\000\067\000\
\068\000\069\000\070\000\081\000\082\000\083\000\000\000\072\000\
\073\000\074\000\075\000\076\000\077\000\078\000\079\000\080\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\138\000\081\000\082\000\083\000\066\000\067\000\068\000\069\000\
\070\000\000\000\000\000\000\000\000\000\072\000\073\000\074\000\
\075\000\076\000\077\000\078\000\079\000\080\000\140\000\000\000\
\000\000\000\000\066\000\067\000\068\000\069\000\070\000\081\000\
\082\000\083\000\000\000\072\000\073\000\074\000\075\000\076\000\
\077\000\078\000\079\000\080\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\145\000\081\000\082\000\083\000\
\082\000\082\000\000\000\000\000\000\000\082\000\082\000\000\000\
\082\000\000\000\082\000\082\000\082\000\082\000\082\000\082\000\
\082\000\082\000\202\000\000\000\000\000\068\000\068\000\000\000\
\000\000\000\000\068\000\068\000\000\000\068\000\082\000\068\000\
\068\000\068\000\068\000\068\000\068\000\068\000\068\000\000\000\
\000\000\000\000\000\000\000\000\082\000\000\000\082\000\000\000\
\082\000\075\000\075\000\068\000\075\000\000\000\075\000\075\000\
\075\000\075\000\075\000\075\000\075\000\075\000\000\000\000\000\
\000\000\068\000\000\000\068\000\000\000\068\000\069\000\069\000\
\000\000\000\000\075\000\069\000\069\000\000\000\069\000\000\000\
\069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
\075\000\000\000\075\000\000\000\075\000\000\000\072\000\072\000\
\000\000\072\000\000\000\000\000\069\000\000\000\000\000\072\000\
\072\000\072\000\072\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\069\000\000\000\069\000\000\000\069\000\072\000\
\073\000\073\000\000\000\073\000\000\000\000\000\000\000\000\000\
\000\000\073\000\073\000\073\000\073\000\072\000\000\000\072\000\
\000\000\072\000\000\000\078\000\078\000\000\000\078\000\000\000\
\000\000\073\000\080\000\080\000\000\000\080\000\078\000\078\000\
\000\000\000\000\000\000\000\000\000\000\080\000\080\000\073\000\
\000\000\073\000\000\000\073\000\078\000\000\000\000\000\000\000\
\000\000\000\000\000\000\080\000\000\000\000\000\000\000\000\000\
\000\000\000\000\078\000\000\000\078\000\000\000\078\000\000\000\
\000\000\080\000\000\000\080\000\000\000\080\000\066\000\067\000\
\068\000\069\000\070\000\000\000\000\000\000\000\000\000\072\000\
\073\000\074\000\075\000\076\000\077\000\078\000\079\000\080\000\
\000\000\000\000\000\000\000\000\066\000\067\000\068\000\069\000\
\070\000\081\000\082\000\083\000\181\000\072\000\073\000\074\000\
\075\000\076\000\077\000\078\000\079\000\080\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\081\000\
\082\000\083\000\201\000\066\000\067\000\068\000\069\000\070\000\
\071\000\000\000\000\000\000\000\072\000\073\000\074\000\075\000\
\076\000\077\000\078\000\079\000\080\000\000\000\000\000\000\000\
\066\000\067\000\068\000\069\000\070\000\090\000\081\000\082\000\
\083\000\072\000\073\000\074\000\075\000\076\000\077\000\078\000\
\079\000\080\000\000\000\000\000\000\000\000\000\066\000\067\000\
\068\000\069\000\070\000\081\000\082\000\083\000\109\000\072\000\
\073\000\074\000\075\000\076\000\077\000\078\000\079\000\080\000\
\000\000\000\000\000\000\066\000\067\000\068\000\069\000\070\000\
\190\000\081\000\082\000\083\000\072\000\073\000\074\000\075\000\
\076\000\077\000\078\000\079\000\080\000\000\000\000\000\000\000\
\066\000\067\000\068\000\069\000\070\000\000\000\081\000\082\000\
\083\000\072\000\073\000\074\000\075\000\076\000\077\000\078\000\
\079\000\080\000\000\000\000\000\000\000\066\000\067\000\068\000\
\069\000\070\000\000\000\081\000\082\000\083\000\072\000\073\000\
\074\000\075\000\076\000\077\000\078\000\000\000\000\000\000\000\
\000\000\000\000\066\000\067\000\068\000\069\000\070\000\000\000\
\081\000\082\000\083\000\072\000\073\000\074\000\075\000\076\000\
\066\000\067\000\068\000\069\000\070\000\068\000\069\000\070\000\
\000\000\072\000\000\000\000\000\072\000\081\000\082\000\083\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\081\000\082\000\083\000\081\000\082\000\
\083\000"

let yycheck = "\006\001\
\000\000\004\000\005\000\006\000\137\000\007\001\007\001\010\000\
\051\000\052\000\053\000\054\000\010\001\001\000\048\001\007\001\
\007\001\007\001\007\001\022\000\023\000\048\001\065\000\048\001\
\007\001\048\001\048\001\007\001\048\001\048\001\028\001\029\001\
\030\001\031\001\048\001\013\001\013\001\006\001\050\001\050\001\
\006\001\000\000\049\001\046\000\047\000\048\000\007\001\049\001\
\049\001\007\001\007\001\002\001\055\000\045\001\187\000\006\001\
\045\001\049\001\049\001\049\001\049\001\064\000\045\001\066\000\
\067\000\068\000\069\000\070\000\019\001\049\001\073\000\074\000\
\075\000\076\000\077\000\078\000\079\000\080\000\081\000\082\000\
\083\000\032\001\033\001\034\001\035\001\036\001\006\001\007\001\
\049\001\009\001\041\001\049\001\049\001\044\001\008\001\046\001\
\011\001\048\001\011\001\050\001\051\001\052\001\053\001\054\001\
\107\000\007\001\109\000\110\000\007\001\007\001\011\001\031\001\
\048\001\046\001\011\001\008\001\011\001\011\001\161\000\011\001\
\002\001\011\001\011\001\007\001\011\001\045\001\129\000\047\001\
\011\001\049\001\133\000\134\000\010\001\136\000\048\001\007\001\
\139\000\019\001\020\001\007\001\022\001\023\001\007\001\007\001\
\050\001\027\001\046\001\049\001\047\001\047\001\032\001\033\001\
\034\001\035\001\036\001\048\001\038\001\039\001\040\001\041\001\
\042\001\164\000\044\001\047\001\046\001\047\001\048\001\046\001\
\050\001\051\001\052\001\053\001\054\001\045\001\007\001\010\001\
\021\001\045\001\181\000\182\000\045\001\045\001\185\000\049\001\
\002\001\046\001\189\000\190\000\191\000\046\001\050\001\050\001\
\050\001\028\001\029\001\030\001\050\001\050\001\201\000\006\001\
\203\000\019\001\020\001\006\001\022\001\023\001\006\001\210\000\
\211\000\027\001\049\001\190\000\045\001\187\000\032\001\033\001\
\034\001\035\001\036\001\110\000\038\001\039\001\040\001\041\001\
\042\001\177\000\044\001\179\000\046\001\047\001\048\001\255\255\
\050\001\051\001\052\001\053\001\054\001\001\001\002\001\003\001\
\004\001\005\001\006\001\255\255\255\255\197\000\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\255\255\
\208\000\209\000\002\001\255\255\255\255\255\255\255\255\255\255\
\028\001\029\001\030\001\032\001\033\001\034\001\035\001\036\001\
\255\255\038\001\255\255\019\001\020\001\255\255\022\001\023\001\
\255\255\255\255\255\255\027\001\255\255\255\255\050\001\255\255\
\032\001\033\001\034\001\035\001\036\001\255\255\038\001\039\001\
\040\001\041\001\042\001\002\001\044\001\255\255\046\001\047\001\
\048\001\255\255\050\001\051\001\052\001\053\001\054\001\255\255\
\255\255\255\255\255\255\255\255\019\001\020\001\255\255\022\001\
\023\001\032\001\033\001\034\001\027\001\036\001\255\255\038\001\
\255\255\032\001\033\001\034\001\035\001\036\001\255\255\038\001\
\039\001\040\001\041\001\042\001\002\001\044\001\255\255\046\001\
\255\255\048\001\255\255\050\001\051\001\052\001\053\001\054\001\
\255\255\255\255\255\255\255\255\255\255\019\001\020\001\255\255\
\022\001\023\001\255\255\255\255\255\255\027\001\255\255\255\255\
\255\255\255\255\032\001\033\001\034\001\035\001\036\001\255\255\
\038\001\039\001\040\001\041\001\042\001\002\001\044\001\255\255\
\046\001\047\001\048\001\255\255\050\001\051\001\052\001\053\001\
\054\001\255\255\255\255\255\255\255\255\255\255\019\001\020\001\
\255\255\022\001\023\001\255\255\255\255\255\255\027\001\255\255\
\255\255\255\255\255\255\032\001\033\001\034\001\035\001\036\001\
\255\255\038\001\039\001\040\001\041\001\042\001\002\001\044\001\
\255\255\046\001\047\001\048\001\255\255\050\001\051\001\052\001\
\053\001\054\001\255\255\255\255\255\255\255\255\255\255\019\001\
\020\001\255\255\022\001\023\001\255\255\255\255\255\255\027\001\
\002\001\255\255\255\255\255\255\032\001\033\001\034\001\035\001\
\036\001\255\255\038\001\039\001\040\001\041\001\042\001\255\255\
\044\001\019\001\046\001\047\001\048\001\255\255\050\001\051\001\
\052\001\053\001\054\001\255\255\030\001\255\255\032\001\033\001\
\034\001\035\001\036\001\255\255\002\001\255\255\255\255\041\001\
\255\255\255\255\044\001\255\255\046\001\255\255\048\001\255\255\
\050\001\051\001\052\001\053\001\054\001\019\001\032\001\033\001\
\034\001\035\001\036\001\002\001\038\001\039\001\040\001\041\001\
\042\001\255\255\032\001\033\001\034\001\035\001\036\001\255\255\
\255\255\255\255\255\255\041\001\019\001\255\255\044\001\255\255\
\046\001\255\255\048\001\255\255\050\001\051\001\052\001\053\001\
\054\001\032\001\033\001\034\001\035\001\036\001\255\255\255\255\
\255\255\255\255\041\001\255\255\255\255\044\001\255\255\046\001\
\255\255\048\001\255\255\050\001\051\001\052\001\053\001\054\001\
\001\001\002\001\003\001\004\001\005\001\006\001\007\001\255\255\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\028\001\029\001\030\001\031\001\006\001\
\007\001\255\255\009\001\255\255\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\045\001\255\255\047\001\255\255\
\049\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\031\001\009\001\255\255\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\255\255\255\255\045\001\255\255\
\047\001\255\255\049\001\255\255\028\001\029\001\030\001\031\001\
\006\001\007\001\255\255\009\001\255\255\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\045\001\255\255\047\001\
\255\255\049\001\001\001\002\001\003\001\004\001\005\001\006\001\
\007\001\031\001\009\001\255\255\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\255\255\255\255\255\255\045\001\
\255\255\047\001\255\255\049\001\255\255\028\001\029\001\030\001\
\031\001\006\001\007\001\255\255\009\001\255\255\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\045\001\255\255\
\047\001\255\255\049\001\001\001\002\001\003\001\004\001\005\001\
\006\001\007\001\031\001\009\001\255\255\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\255\255\255\255\
\045\001\255\255\047\001\255\255\049\001\255\255\028\001\029\001\
\030\001\031\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\045\001\
\255\255\047\001\255\255\049\001\001\001\002\001\003\001\004\001\
\005\001\006\001\007\001\255\255\009\001\255\255\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\255\255\
\255\255\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\255\255\009\001\031\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\255\255\255\255\255\255\255\255\
\045\001\255\255\047\001\255\255\049\001\255\255\255\255\031\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\045\001\255\255\047\001\
\255\255\049\001\001\001\002\001\003\001\004\001\005\001\006\001\
\007\001\255\255\009\001\255\255\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\255\255\255\255\255\255\001\001\
\002\001\003\001\004\001\005\001\006\001\007\001\255\255\009\001\
\031\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\255\255\255\255\255\255\255\255\255\255\045\001\255\255\
\047\001\255\255\049\001\255\255\255\255\031\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\045\001\255\255\047\001\255\255\049\001\
\001\001\002\001\003\001\004\001\005\001\006\001\007\001\255\255\
\009\001\255\255\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\255\255\255\255\255\255\255\255\001\001\002\001\
\003\001\004\001\005\001\255\255\007\001\255\255\031\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\255\255\255\255\255\255\255\255\045\001\255\255\047\001\255\255\
\049\001\028\001\029\001\030\001\001\001\002\001\003\001\004\001\
\005\001\006\001\007\001\255\255\009\001\255\255\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\049\001\255\255\
\255\255\255\255\001\001\002\001\003\001\004\001\005\001\255\255\
\255\255\255\255\255\255\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\255\255\255\255\255\255\255\255\
\045\001\255\255\047\001\255\255\049\001\028\001\029\001\030\001\
\001\001\002\001\003\001\004\001\005\001\255\255\255\255\255\255\
\255\255\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\049\001\255\255\255\255\255\255\001\001\002\001\
\003\001\004\001\005\001\028\001\029\001\030\001\255\255\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\049\001\028\001\029\001\030\001\001\001\002\001\003\001\004\001\
\005\001\255\255\255\255\255\255\255\255\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\049\001\255\255\
\255\255\255\255\001\001\002\001\003\001\004\001\005\001\028\001\
\029\001\030\001\255\255\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\049\001\028\001\029\001\030\001\
\001\001\002\001\255\255\255\255\255\255\006\001\007\001\255\255\
\009\001\255\255\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\049\001\255\255\255\255\001\001\002\001\255\255\
\255\255\255\255\006\001\007\001\255\255\009\001\031\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\255\255\
\255\255\255\255\255\255\255\255\045\001\255\255\047\001\255\255\
\049\001\006\001\007\001\031\001\009\001\255\255\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\255\255\
\255\255\045\001\255\255\047\001\255\255\049\001\001\001\002\001\
\255\255\255\255\031\001\006\001\007\001\255\255\009\001\255\255\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\045\001\255\255\047\001\255\255\049\001\255\255\006\001\007\001\
\255\255\009\001\255\255\255\255\031\001\255\255\255\255\015\001\
\016\001\017\001\018\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\045\001\255\255\047\001\255\255\049\001\031\001\
\006\001\007\001\255\255\009\001\255\255\255\255\255\255\255\255\
\255\255\015\001\016\001\017\001\018\001\045\001\255\255\047\001\
\255\255\049\001\255\255\006\001\007\001\255\255\009\001\255\255\
\255\255\031\001\006\001\007\001\255\255\009\001\017\001\018\001\
\255\255\255\255\255\255\255\255\255\255\017\001\018\001\045\001\
\255\255\047\001\255\255\049\001\031\001\255\255\255\255\255\255\
\255\255\255\255\255\255\031\001\255\255\255\255\255\255\255\255\
\255\255\255\255\045\001\255\255\047\001\255\255\049\001\255\255\
\255\255\045\001\255\255\047\001\255\255\049\001\001\001\002\001\
\003\001\004\001\005\001\255\255\255\255\255\255\255\255\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\255\255\255\255\255\255\255\255\001\001\002\001\003\001\004\001\
\005\001\028\001\029\001\030\001\031\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\028\001\
\029\001\030\001\031\001\001\001\002\001\003\001\004\001\005\001\
\006\001\255\255\255\255\255\255\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\255\255\255\255\
\001\001\002\001\003\001\004\001\005\001\006\001\028\001\029\001\
\030\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\255\255\255\255\255\255\255\255\001\001\002\001\
\003\001\004\001\005\001\028\001\029\001\030\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\255\255\255\255\255\255\001\001\002\001\003\001\004\001\005\001\
\006\001\028\001\029\001\030\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\255\255\255\255\
\001\001\002\001\003\001\004\001\005\001\255\255\028\001\029\001\
\030\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\255\255\255\255\255\255\001\001\002\001\003\001\
\004\001\005\001\255\255\028\001\029\001\030\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\255\255\255\255\255\255\
\255\255\255\255\001\001\002\001\003\001\004\001\005\001\255\255\
\028\001\029\001\030\001\010\001\011\001\012\001\013\001\014\001\
\001\001\002\001\003\001\004\001\005\001\003\001\004\001\005\001\
\255\255\010\001\255\255\255\255\010\001\028\001\029\001\030\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\028\001\029\001\030\001\028\001\029\001\
\030\001"

let yynames_const = "\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  MOD\000\
  SEMICOLON\000\
  SEQUENCE\000\
  ASSIGN\000\
  COLON\000\
  DOT\000\
  GT\000\
  GEQ\000\
  LT\000\
  LEQ\000\
  EQ\000\
  NEQ\000\
  AND\000\
  OR\000\
  NOT\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  BREAK\000\
  CONTINUE\000\
  IN\000\
  RETURN\000\
  RIGHTLINK\000\
  SIMILARITY\000\
  AT\000\
  AMPERSAND\000\
  INT\000\
  FLOAT\000\
  STRING\000\
  BOOL\000\
  NODE\000\
  EDGE\000\
  GRAPH\000\
  LIST\000\
  DICT\000\
  NULL\000\
  VOID\000\
  QUOTE\000\
  LBRACKET\000\
  RBRACKET\000\
  LBRACE\000\
  RBRACE\000\
  LPAREN\000\
  RPAREN\000\
  EOF\000\
  "

let yynames_block = "\
  ID\000\
  INT_LITERAL\000\
  STRING_LITERAL\000\
  FLOAT_LITERAL\000\
  BOOL_LITERAL\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 62 "parser.mly"
                                        ( List.rev _1 )
# 705 "parser.ml"
               :  Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 65 "parser.mly"
                                        ( [] )
# 711 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 66 "parser.mly"
                                        ( _2 :: _1 )
# 719 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 69 "parser.mly"
                                       ( Expr(_1) )
# 726 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'func_decl) in
    Obj.repr(
# 70 "parser.mly"
                                        ( Func(_1) )
# 733 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 71 "parser.mly"
                                  ( Return(Noexpr) )
# 739 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 72 "parser.mly"
                                       ( Return(_2) )
# 746 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 8 : 'for_expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 'for_expr) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 74 "parser.mly"
  (For(_3, _5, _7, List.rev _10))
# 756 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 8 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 5 : 'stmt_list) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 76 "parser.mly"
  (If(_3,List.rev _6,List.rev _10))
# 765 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 78 "parser.mly"
  (If(_3,List.rev _6,[]))
# 773 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 80 "parser.mly"
  (While(_3, List.rev _6))
# 781 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'var_decl) in
    Obj.repr(
# 81 "parser.mly"
                                       ( Var_dec(_1))
# 788 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'var_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 84 "parser.mly"
                           ( Local(_1, _2, Noexpr) )
# 796 "parser.ml"
               : 'var_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'var_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 85 "parser.mly"
                           ( Local(_1, _2, _4) )
# 805 "parser.ml"
               : 'var_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 88 "parser.mly"
                        (Void_t)
# 811 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 89 "parser.mly"
                        (Null_t)
# 817 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 90 "parser.mly"
                (Int_t)
# 823 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 91 "parser.mly"
                (Float_t)
# 829 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 92 "parser.mly"
                 (String_t)
# 835 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 93 "parser.mly"
       (Bool_t)
# 841 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 94 "parser.mly"
       (Node_t)
# 847 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 95 "parser.mly"
        (Graph_t)
# 853 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 96 "parser.mly"
                 (Dict_Int_t)
# 859 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 97 "parser.mly"
                   (Dict_Float_t)
# 865 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 98 "parser.mly"
                    (Dict_String_t)
# 871 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 99 "parser.mly"
                  (Dict_Node_t)
# 877 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 100 "parser.mly"
                   (Dict_Graph_t)
# 883 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 101 "parser.mly"
                 (List_Int_t)
# 889 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 102 "parser.mly"
                   (List_Float_t)
# 895 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 103 "parser.mly"
                    (List_String_t)
# 901 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 104 "parser.mly"
                  (List_Bool_t)
# 907 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 105 "parser.mly"
                  (List_Node_t)
# 913 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 106 "parser.mly"
                   (List_Graph_t)
# 919 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 109 "parser.mly"
                              ( [] )
# 925 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal) in
    Obj.repr(
# 110 "parser.mly"
                              ( [_1] )
# 932 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'formal) in
    Obj.repr(
# 111 "parser.mly"
                              ( _3 :: _1 )
# 940 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'var_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 115 "parser.mly"
                        ( Formal(_1, _2) )
# 948 "parser.ml"
               : 'formal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'var_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'formal_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 118 "parser.mly"
                                                                (
  {
    returnType = _1;
    name = _2;
    args = List.rev _4;
    body = List.rev _7;
  }
)
# 965 "parser.ml"
               : 'func_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 130 "parser.mly"
                                        ( Noexpr )
# 971 "parser.ml"
               : 'for_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 131 "parser.mly"
                                        ( _1 )
# 978 "parser.ml"
               : 'for_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'literals) in
    Obj.repr(
# 134 "parser.mly"
           (_1)
# 985 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 135 "parser.mly"
                                  ( Null )
# 991 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arith_ops) in
    Obj.repr(
# 136 "parser.mly"
                                  ( _1 )
# 998 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'graph_ops) in
    Obj.repr(
# 137 "parser.mly"
                                  ( _1 )
# 1005 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 138 "parser.mly"
                          ( Node(_3) )
# 1012 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 139 "parser.mly"
                              ( Id(_1) )
# 1019 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 140 "parser.mly"
                              ( Assign(_1, _3) )
# 1027 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 141 "parser.mly"
                                           ( EdgeAt(_1, _4, _6) )
# 1036 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'list) in
    Obj.repr(
# 142 "parser.mly"
                             ( ListP(List.rev _2) )
# 1043 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'dict) in
    Obj.repr(
# 143 "parser.mly"
                        ( DictP(List.rev _2) )
# 1050 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 144 "parser.mly"
                      ( _2 )
# 1057 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'list) in
    Obj.repr(
# 145 "parser.mly"
                                    ( Call(_1, List.rev _3) )
# 1065 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'list) in
    Obj.repr(
# 146 "parser.mly"
                                      ( Call("int", List.rev _3) )
# 1072 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'list) in
    Obj.repr(
# 147 "parser.mly"
                                        ( Call("float", List.rev _3) )
# 1079 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'list) in
    Obj.repr(
# 148 "parser.mly"
                                       ( Call("bool", List.rev _3) )
# 1086 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'list) in
    Obj.repr(
# 149 "parser.mly"
                                         ( Call("string", List.rev _3) )
# 1093 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'list) in
    Obj.repr(
# 150 "parser.mly"
                                   (CallDefault(_1, _3, List.rev _5))
# 1102 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 155 "parser.mly"
                                        ( [] )
# 1108 "parser.ml"
               : 'list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 156 "parser.mly"
                                        ( [_1] )
# 1115 "parser.ml"
               : 'list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 157 "parser.mly"
                                        ( _3 :: _1 )
# 1123 "parser.ml"
               : 'list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 160 "parser.mly"
                              ( { graphs = [_3]; edges = [_1] } )
# 1131 "parser.ml"
               : 'list_graph))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'list_graph) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 162 "parser.mly"
    ( { graphs = _5 :: (_1).graphs; edges = _3 :: (_1).edges } )
# 1140 "parser.ml"
               : 'list_graph))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'list_graph) in
    Obj.repr(
# 165 "parser.mly"
                                 (
  { graphs = List.rev (_2).graphs; edges = List.rev (_2).edges }
)
# 1149 "parser.ml"
               : 'list_graph_literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 171 "parser.mly"
                  ( (_1, _3) )
# 1157 "parser.ml"
               : 'dict_key_value))
; (fun __caml_parser_env ->
    Obj.repr(
# 175 "parser.mly"
                                    ( [] )
# 1163 "parser.ml"
               : 'dict))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dict_key_value) in
    Obj.repr(
# 176 "parser.mly"
                             ( [_1] )
# 1170 "parser.ml"
               : 'dict))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dict) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dict_key_value) in
    Obj.repr(
# 177 "parser.mly"
                                  (_3 :: _1)
# 1178 "parser.ml"
               : 'dict))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 180 "parser.mly"
                              ( Binop(_1, Add,   _3) )
# 1186 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 181 "parser.mly"
                              ( Binop(_1, Sub,   _3) )
# 1194 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 182 "parser.mly"
                              ( Binop(_1, Mult,  _3) )
# 1202 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 183 "parser.mly"
                              ( Binop(_1, Div,   _3) )
# 1210 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 184 "parser.mly"
                           ( Binop(_1, Equal, _3) )
# 1218 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 185 "parser.mly"
                         ( Binop(_1, Neq,   _3) )
# 1226 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 186 "parser.mly"
                         ( Binop(_1, Less,  _3) )
# 1234 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 187 "parser.mly"
                     ( Binop(_1, Leq,   _3) )
# 1242 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 188 "parser.mly"
                        ( Binop(_1, Greater,  _3) )
# 1250 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 189 "parser.mly"
                     ( Binop(_1, Geq,   _3) )
# 1258 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 190 "parser.mly"
                              ( Binop(_1, And,   _3) )
# 1266 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 191 "parser.mly"
                              ( Binop(_1, Mod,   _3) )
# 1274 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 192 "parser.mly"
                                  ( Binop(_1, Or,    _3) )
# 1282 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 193 "parser.mly"
                           ( Unop (Not,   _2) )
# 1289 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 194 "parser.mly"
                            ( Unop (Neg, _2) )
# 1296 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 195 "parser.mly"
                                  ( Binop(_1, RootAs, _3) )
# 1304 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 196 "parser.mly"
                                  ( Binop(_1, ListEdgesAt, _4) )
# 1312 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 197 "parser.mly"
                                  ( Binop(_1, ListNodesAt, _3) )
# 1320 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 201 "parser.mly"
                                      ( Graph_Link(_1, Right_Link, _3, Null) )
# 1328 "parser.ml"
               : 'graph_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'list_graph_literal) in
    Obj.repr(
# 202 "parser.mly"
                                      ( Graph_Link(_1, Right_Link, ListP((_3).graphs), ListP((_3).edges)) )
# 1336 "parser.ml"
               : 'graph_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 203 "parser.mly"
                                      ( Graph_Link(_1, Right_Link, _5, _3) )
# 1345 "parser.ml"
               : 'graph_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 208 "parser.mly"
                    (Num_Lit( Num_Int(_1) ))
# 1352 "parser.ml"
               : 'literals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 209 "parser.mly"
                    (Num_Lit( Num_Float(_1) ))
# 1359 "parser.ml"
               : 'literals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 210 "parser.mly"
                     (String_Lit(_1) )
# 1366 "parser.ml"
               : 'literals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 211 "parser.mly"
                     (Bool_lit(_1) )
# 1373 "parser.ml"
               : 'literals))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf :  Ast.program)
