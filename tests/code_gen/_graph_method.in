node a = node("a");
node b = node("b");
node c = node("c");
node d = node("d");
node e = node("e");

graph gh = a->b->c;

print("graph gh = a->b->c");
printf("gh.root() => %s\n", string(gh.root()) );
printf("gh.size() => %d\n", gh.size() );
print("g2 = gh~b => Return a new graph with different root");
graph g2 = gh~b;
printf("gh.root() => %s\n", string(gh.root()) );
printf("gh.nodes() => ");
showNodeList( gh.nodes() );
printf("g2.root() => %s\n", string(g2.root()) );
printf("g2.nodes() => ");
showNodeList( gh.nodes() );

printf("(d<-e).root() => %s\n", string((d<-e).root()) );

printf("(a--[b,c]).root() => %s\n", string((a--[b,c]).root()) );

printf("((a--[b,c])~c).root() => %s\n", string(((a--[b,c])~c).root()) );

printf("(a->[b->c, d<-e]).size() => %d\n", (a->[b->c, d<-e]).size() );

printf("(a->[b->c, d<-e]).nodes() =>");
showNodeList( (a->[b->c, d<-e]).nodes() );

void showNodeList(list<node> l) {
  if (l == null) { return; }
  int i; int size = l.size();
  printf("[");
  for (i=0; i < size-1; i=i+1) {
    printf("%s, ", string( l.get(i) ) );
  }
  if (size > 0) {
    printf("%s]\n", string(l.get(i)));
  } else {
    print("]");
  }
}
