node a = node("a");
node b = node("b");
node c = node("c");
node d = node("d");
node e = node("e");
node f = node("f");
node g = node("g");

graph gh = a->[
	1&b->1&e->[4&g->1&b, 2&c],
	5&c->[1&g, 1&f->1&c],
	3&d->[2&c, 3&f]
];

printGraph(gh);

print("\nDijkstra Results:");

dijkstra(gh, a);

void dijkstra(graph gh, node sour) {
	dict<int> distance = { sour: 0 };
	list<node> queue = gh.nodes();
	dict<node> parent = {sour: sour};
	int i;
	for (i=0; i<queue.size(); i=i+1) {
		distance.put(queue.get(i), 2147483647);
		parent.put(queue.get(i), null);
	}
	distance.put(sour, 0);

	while (queue.size() > 0) {
		updateDistance( findMin() );
	}
	queue = gh.nodes();
	for (i=0; i<queue.size(); i=i+1) {
		showRes(queue.get(i));
	}

	node findMin() {
		node minNode = queue.get(0);
		int minDis = distance.get(minNode);
		int minIndex = 0;

		int i; node tmp;
		for (i = 1; i < queue.size(); i=i+1) {
			tmp = queue.get(i);
			if ( distance.get(tmp) < minDis ) {
				minNode = tmp;
				minDis = distance.get(tmp);
				minIndex = i;
			}
		}
		queue.remove(minIndex);
		return minNode;
	}

	void updateDistance(node u) {
		int i; int dv; int dis; node v;
		list<node> neighs = gh@u;
		int du = distance.get(u);
		for (i = 0; i<neighs.size(); i=i+1) {
			v = neighs.get(i);
			dv = distance.get(v);
			dis = int( gh@(u, v) );
			if ((dis + du) < dv) {
				distance.put(v, dis+du);
				parent.put(v, u);
			}
		}
	}

	void showRes(node dest) {
		list<node> res = [dest];
		node tmp = parent.get(dest);
		while (tmp != null) {
			res.add( tmp );
			tmp = parent.get(tmp);
		}
		int i;
		printf("%s -> %s : %d [ ", string(sour), string(dest), distance.get(dest) );
		for (i=res.size()-1; i > 0; i=i-1) {
			printf("%s, ", string( res.get(i) ));
		}
		if (i == 0) {
			printf("%s ]\n", string( res.get(i) ));	
		} else {
			print("]");
		}
	}
}


void printGraph(graph g) {
  string getNode(int i) {
    return string( nodes.get(i) );
  }
  printf("Root: %s\n", string(g.root()));

  printf("Nodes: ");
  list<node> nodes = g.nodes();
  int size = g.size();
  int i;
  int j;
  for (i=0; i < size - 1; i=i+1) {
    printf( "%s, ", getNode(i) );
  }
  if (size > 0) {
    print( getNode(i) );
  }

  printf("Edges:\n");
  node a;
  node b;
  for (i=0; i < size; i=i+1) {
    for (j=0; j<size; j=j+1) {
      a = nodes.get(i);
      b = nodes.get(j);
      if ( g@(a,b) != null ) {
        printf("%s -> %s : %d\n", string(a), string(b), int(g@(a,b)));
      }
    }
  }
}