print("------------------general method for list------------------");

list<int> a = [1, 2, 3];
list<float> b = [1.0, 2.0, 3.0];
list<string> c = ["a", "b", "c"];
list<bool> d = [true, false, true];

print(a);
print(b);
print(c);
print(d);

node n1 = node(7);
node n2 = node(8);
node n3 = node(9);
list<node> nd = [n1, n2, n3];
print("print node list");
print(nd);

list<graph> gp = [n1->n2, n2->n3, n3->n1];
print("print graph list");
print(gp);

print("------------ test add, remove ---------------");

print("remove element not existing a.remove(4), list doesn't change");
a.remove(4);
print(a);
print("adding element using list.add()");
a.add(5);
print(a);
print("remove element using -");
a=a-2;
print(a);
a=a-1;
a=a-5;
print("remove list to empty");
a=a-3;
print(a);
print("add element using +"");
a=a+6;
print(a);
print("-------------------------------------------");

print("------------ test size, get, set ---------------");
print(b);
print("print size");
print(b.size());
print("implement get()");
print(b.get(0));
print("set second element to 5.0");
b.set(1,5.0);
print(b);
print("------------------------------------------------");

/*  print("------------ test size ---------------")
print(c);
print(c.size());
c.set(1,)
print("-------------------------------------");


print("------------ test get, set ---------------")
print(d);
print(d.get(0));

print("-------------------------------------");


node n1 = node(2);
node n2 = node(3);
node n3 = node(5);
list<node> nd = [n1, n2, n3];

print(nd);

list<graph> gp = [n1->n2, n2->n3, n3->n1];

print(gp);

print(l_graph);
print(l_int);
l_int.add(4);
print(l_int);
print(l_int.get(0));
l_int.set(0, 4);
print(l_int);
l_int.remove(0);
print(l_int);
print(l_int.size());


print("------------------test for list of float type------------------");

list<float> l_float = [1.0, 2.0, 3.0];
print(l_float);
l_float.add(4.0);
print(l_float);
print(l_float.get(0));
l_float.set(0, 4.0);
print(l_float);
l_float.remove(0);
print(l_float);
print(l_float.size());
print(l_float.pop());
print(l_float);
print(l_float.push(5.0));

print("------------------test for list of float type------------------");

list<string> l_string = ["a", "b", "c"];
print(l_string);
l_string.add("d");
print(l_string.get(0));
l_string.set(0, "e");
print(l_string);
l_string.remove(0);
print(l_string);
print(l_string.size());
print(l_string.pop());
print(l_string);
print(l_string.push("x"));

print("------------------test for list of bool type------------------");


list<bool> l_bool = [true, false, true];
print(l_bool);
l_bool.add(false);
print(l_bool.get(0));
l_bool.set(0, false);
print(l_bool);
l_bool.remove(0);
print(l_bool);
print(l_bool.size());
print(l_bool.pop());
print(l_bool);
print(l_bool.push(true));

print("------------------test for list of node type------------------");

node n1 = node(1);
node n2 = node(2);
node n3 = node(3);
list<node> l_node = [n1, n2, n3];
print(l_node);
l_node.add(node(4));
print(l_node.get(0));
l_node.set(0, node("x"));
print(l_node);
l_node.remove(0);
print(l_node);
print(l_node.size());
print(l_node.pop());
print(l_node);
print(l_node.push(node("y")));

print("------------------test for list of graph type------------------");

list<graph> l_graph = [n1->n2, n2->n3, n3->n1];

print(l_graph);
l_graph.add(n1<-n2);
print(l_graph.get(0));
l_graph.set(0, n1--n2);
print(l_graph);
l_graph.remove(0);
print(l_graph);
print(l_graph.size());
print(l_graph.pop());
print(l_graph);
print(l_graph.push(node(5)->node(6))); */
