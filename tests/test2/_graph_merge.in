node a = node("a");
node b = node("b");
node c = node("c");
node d = node("d");
node e = node("e");

print("a -> 0&b +  c -> [1&a, 2&b, 4&d, 3&e]");

graph g = a -> 0&b +  c -> 1&a + a -> 2&d;
print(g);

printGraph(g);

print("--------------------------------------");
print("No shared nodes! Return the first graph.");
print("a->0&b + c->1&d");
printGraph( a->0&b + c->1&d );

print("--------------------------------------");
print("Shared edges. Update the edge value with the second one.");
print("a -- 0&b -- 2&c -- 1&a + b -- 3&c");
printGraph( a -- 0&b -- 2&c -- 1&a + b -- 3&c );

void printGraph(graph g) {
  string getNode(int i) {
    return string( nodes.get(i) );
  }
  printf("Root: %s\n", string(g.root()));

  printf("Nodes: ");
  list<node> nodes = g.nodes();
  int size = g.size();
  int i;
  int j;
  for (i=0; i < size - 1; i=i+1) {
    printf( "%s, ", getNode(i) );
  }
  if (size > 0) {
    print( getNode(i) );
  }

  printf("Edges:\n");
  node a;
  node b;
  for (i=0; i < size; i=i+1) {
    for (j=0; j<size; j=j+1) {
      a = nodes.get(i);
      b = nodes.get(j);
      if ( g@(a,b) != null ) {
        printf("%s -> %s : %d\n", string(a), string(b), int(g@(a,b)));
      }
    }
  }
}
